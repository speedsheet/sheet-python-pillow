# <#>Pillow<> SpeedSheet
<b>What you need, faster.<>


# Summary

A current, maintained version if PIL.


### Links

Official:
<l>https://pillow.readthedocs.io/en/stable/index.html<>

Source:
<l>https://github.com/python-pillow/Pillow<>

Pypi:
<l>https://pypi.org/project/Pillow/<>



### Install - PIP

<cb>pip3 install Pillow<>



### Install - PIP Requirements.txt

Add:

<cb>Pillow<>



# Image



### Effect - Gradient Background

Stack Overflow:
<l>https://stackoverflow.com/questions/32530345/pil-generating-vertical-gradient-image<>

Or Simpler(?):
<l>https://gist.github.com/weihanglo/1e754ec47fdd683a42fdf6a272904535<>



### Image File - Read

<cb>= Image.open()<>

Full Form:

<cb>from PIL import Image

= Image.open(<v>image_path<>)<>


Returns: <!>?<>  |  <c>PIL.JpegImagePlugin.JpegImageFile<>
@
@ .open(), load



### Image File - Write

<><v>image<>.save(<v>file_path<>)<>


The file name extension determines the file format used.


Example:

<cb><v>image<>.save("<v>images/new_image.png<>")<>
@
@ .save(), save



### Image - Convert - From Array

<cb>= Image.fromarray()<>

Full Form:

<cb>from PIL import Image

= Image.fromarray(<v>list_1<>)<>

<m>(Test with example)

See:
<l>https://stackoverflow.com/questions/14452824/how-can-i-save-an-image-with-pil<><>
@
@ Image.fromarray(), .fromarray()



### Image - Create

<cb>= Image.new()<>

Full Form:

<cb>from PIL import Image

= Image.new(<v>mode<>, <v>size<>)<>

<cb>= Image.new(<v>mode<>, <v>size<>, <v>color<>)<>

<table><col><c>mode<><><col>(string)<><col><code>'RGB'
'RGBA'<><>
<col> <>
<col><c>size<><><col>(tuple)<><col><code>(<v>width<>, <v>height<>)<><>
<col> <>
<col>color<><col>(tuple)<><col><code>(<v>red<>, <v>blue<>, <v>green<>)
(<v>red<>, <v>blue<>, <v>green<>, <v>alpha<>)<><><>


Creates a new image of the given size and color.


Examples:

<cb>from PIL import Image

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>))
<v>image<>.show()<>

Colored Black:

<cb>from PIL import Image

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (0,0,0))
<v>image<>.show()<>
@
@ new, pil.image.new(), image.new(), .new()



### Image Draw - Line

<cb>draw.line()<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.line(<v>dimensions<>, <v>fill_color<>)<>

<cb><v>draw<>.line(<v>dimensions<>, <v>fill_color<>, <v>width<>)<>

<cb><v>draw<>.line(<v>dimensions<>, fill = <v>fill_color<>, width = <v>width<>)<>


<table><col><c>dimensions<><><col>(tuple)<><col><code>(<v>upper_left_x<>, <v>upper_left_y<>, <v>lower_right_x<>, <v>lower_right_y<>)
((<v>upper_left_x<>, <v>upper_left_y<>), (<v>lower_right_x<>, <v>lower_right_y<>))<>

(pick either form)<><>


Draws a line in the image.


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.line((10, 10, 150, 90), (127, 255, 127))

<v>image<>.show()<>
@
@ fill, box
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .rectangle()



### Image Draw - Rectangle

<cb>draw.rectangle()<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.rectangle(<v>dimensions<>, <v>fill_color<>)<>

<cb><v>draw<>.rectangle(<v>dimensions<>, <v>fill_color<>, <v>outline_color<>)<>

<cb><v>draw<>.rectangle(<v>dimensions<>, fill = <v>fill_color<>, outline = <v>outline_color<>)<>


<table><col><c>dimensions<><><col>(tuple)<><col><code>(<v>upper_left_x<>, <v>upper_left_y<>, <v>lower_right_x<>, <v>lower_right_y<>)
((<v>upper_left_x<>, <v>upper_left_y<>), (<v>lower_right_x<>, <v>lower_right_y<>))<>

(pick either form)<><>


Fills in a rectangular area in the image.


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.rectangle((10, 10, 150, 90), (127, 255, 127))

<v>image<>.show()<>
@
@ fill, box
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .rectangle()



### Image Edit - Crop

<cb>= image.crop((<v>left<>, <v>top<>, <v>right_plus_one<>, <v>bottom_plus_one<>))<>

or

<cb><v>dimensions<> = (<v>left<>, <v>top<>, <v>right_plus_one<>, <v>bottom_plus_one<>)
= image.crop(<v>dimensions<>)<>


Returns: <c>PIL.Image.Image<>


Example:

<cb><v>dimensions<> = (<v>10<>, <v>5<>, <v>30<>, <v>15<>)
<v>cropped<> = image.crop(<v>crop_box<>)<>

Returns Blue Box (Size 20 x 10):

<image "Image - Crop.png">
@
@ .crop()



### Image Edit - Resize

<cb><v>image_1<>.resize((<v>width<>, <v>height<>), <v>resize_algorithm<>)		<#>#1<><>


Returns: <c>PIL.Image.Image<>


<c><v>resize_algorithm<><>  -	<c>Image.LANCZOS<>
					<c>...<>


\#1  -  <c><v>width<><> and <c><v>height<><> must be integers.


Exapmle:

<cb><v>resized<> = <v>image_1<>.resize((160, 90), Image.LANCZOS)<>


### Image Edit - Rotate

<cb>= <v>image_1<>.rotate(<v>degrees<>)<>


Returns: <!>?<>  |  <c>PIL.JpegImagePlugin.JpegImageFile<>



### Image Properties - Size

<cb>= <v>image<>.size<>

Returns: <c>tuple (width, height)<>



### Image Properties - Size, Height

<cb>= <v>image<>.size[1]<>



### Image Properties - Size, Width

<cb>= <v>image<>.size[0]<>



### Image - Overlay

Convert Both to "RGBA":

<cb>= <v>image_1<>.convert("RGBA")<>

Blend Together:

<cb>= Image.blend(<v>background_image<>, <v>overlay_image<>, 0.5)<>

<m>What does <v>0.5<> do? No idea. Figure that out<>

Stack Overflow:
<l>https://stackoverflow.com/questions/10640114/overlay-two-same-sized-images-in-python/44749818<>
@
@ Image.blend(), .blend()



### Image - View

<cb><v>image<>.show()<>

Shows the image in using the default OS viewer.

@
@ .show(), show, display



# Tools


### Color - Get RGB From Hex Value

<cb>= ImageColor.getrgb()<>

<cb>from PIL import ImageColor

= ImageColor.getrgb('#<v>hex_value<>')<>


Example:

<cb>from PIL import ImageColor

<v>MAGENTA<> = ImageColor.getrgb('#<v>FF00FF<>')<>
@
@ named



### Color - Get RGB From Name

<cb>= ImageColor.getrgb()<>

<cb>from PIL import ImageColor

= ImageColor.getrgb('<v>color_name<>')<>


Example:

<cb>from PIL import ImageColor

<v>GREEN<> = ImageColor.getrgb('<v>green<>')<>
@
@ named



# How To

@ how-to



# Reference - Types


### Color Type

<cb>= (<v>red<>, <v>green<>, <v>blue<>)<>

<cb>= (<v>red<>, <v>green<>, <v>blue<>, <v>alpha<>)<><>

Color is a three or four value tuple.
All values range from 0 to 255.


Example:

<cb><v>magenta<> = (<v>255<>, <v>0<>, <v>255<>)<>

50% Opacity:

<cb><v>magenta<> = (<v>255<>, <v>0<>, <v>255<>, <v>127<>)<>



### Size Type

<cb>= (<v>width<>, <v>height<>)<>

Size is a two value tuple.
Defines the size of the image in pixels.


Example:

<cb>size = (<v>160<>, <v>100<>)<>



# Acronyms

### PIL
Python Image Library



# Terms
