# <#>Pillow<> SpeedSheet
<b>Find it faster.<>

This is an interactive <b>Pillow<> cheat sheet. Pillow is an excellent Python image processing library. Use the search to instantly get answers.


<table><col><b>Basics<>					

<*><link "?q=hello+world">Hello World<>
<link "?q=install">Installing<><>

<*><link "?q=image-functions-only+create">Image Creation<>
<link "?q=image-functions-only">Image Functions<>
<link "?q=image-properties-only">Image Properties<>
<link "?q=draw-only">Drawing Functions<>
<link "?q=files-only">File IO<><>

<*><link "?q=tools-only">Tools<>
<link "?q=how-to-only">How Tos<><>

<*><link "?q=online-docs">Online Docs<><><><col><b>Reference<>

<*><link "?q=data-types-only">Data Types<>
<link "?q=named-types-only#named_tuples_-_all">Data Types / As Named Tuples<><>

<*><link "?q=colors-only">Colors<>
<link "?q=filters-only">Filters<><><><>



# Summary

A current, maintained version if PIL.
@
@ links, online, online-docs-only

### Official
<l>https://pillow.readthedocs.io/en/stable/index.html<>

### Source
<l>https://github.com/python-pillow/Pillow<>

### Pypi
<l>https://pypi.org/project/Pillow/<>



### Install - PIP

<cb>pip3 install Pillow<>
@
@ install, download
@ install-only



### Install - PIP Requirements.txt

Add:

<cb>Pillow<>
@
@ install, download
@ install-only



### Import

<cb>from PIL import Image<>



# Hello World
@
@ Examples



### Hello World

Create and run the following python script. This will create an image of a green rectangle.


File Name:

<cb>hello.py<>

File Contents:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.rectangle((10, 10, 150, 90), fill = (127, 255, 127))

<v>image<>.show()<>

Run From The Command-line:

<cb>python3 hello.py<>



### Hello World - 'Hello World' Text

Create and run the following python script. This will create an image with the words 'Hello World'.


File Name:

<cb>hello.py<>

File Contents:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageFont import truetype

<v>font<> = truetype('<v>Arial<>', <v>24<>)

<v>image<> = Image.new(<v>'RGBA'<>, (<v>145<>, <v>38<>), (64, 64, 64))
<v>draw<> = Draw(<v>image<>)
<v>draw<>.text((<v>10<>, <v>5<>), '<v>Hello World<>', '<v>lime<>', font = <v>font<>)

<v>image<>.show()<>

Run From The Command-line:

<cb>python3 hello.py<>



# File Functions
@
@ io, io-only
@ file-only, files-only


### Image File - Read

<cb>= Image.open()<>

Usage:

<cb>from PIL import Image

= Image.open(<v>image_path<>)<>
@
@ .open(), load



### Image File - Write

<cb><v>image<>.save(<v>file_path<>)<>


The file name extension determines the file format used.


Example:

<cb>from PIL import Image

image = Image.new('RGBA', (160, 100), (127, 255, 0))
<v>image<>.save("<v>new_image.png<>")<>
@
@ .save(), save



### Image File - Write Animated

<cb><v>images<>[0].save(<v>file_name<>, append_images = <v>images<>[1:])<>

<cb><v>images<>[0].save(
		<v>file_name<>,
		append_images = <v>images<>[1:],
		duration = <v>milliseconds<>,
		loop = 0,
		save_all = True,
		optimize = True)<>


Writes a list of images to an animated image file for types gif and webp.

Delete the previous image or your images will be appended to it.


Duration:

<in-2>Defines time between images in milliseconds.
Values must be >= 20.<>

Loop:

<in-2>Loop infinitely - set to 0.<>

Supported Extensions:

<in-2>apng, gif, webp<>


Examples:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

def add_circle(<v>image<>, dimensions):
	Draw(<v>image<>).ellipse(dimensions, (255, 255, 0, 255))
	return <v>image<>

<v>background<> = Image.new('RGBA', (<v>100<>, <v>100<>), (<v>30<>, <v>30<>, <v>25<>))

<v>image_1<> = add_circle(<v>background<>.copy(), (<v>10<>, <v>10<>, <v>50<>, <v>50<>))
<v>image_2<> = add_circle(<v>background<>.copy(), (<v>30<>, <v>30<>, <v>70<>, <v>70<>))
<v>image_3<> = add_circle(<v>background<>.copy(), (<v>50<>, <v>50<>, <v>90<>, <v>90<>))

<v>images<> = [<v>image_1<>, <v>image_2<>, <v>image_3<>]

<v>images<>[0].save(
		"<v>squared.gif<>",
		append_images = <v>images<>[1:],
		duration = <v>50<>,
		loop = 0,
		save_all = True,
		optimize = True)<>
@
@ .save(), save
@ gifs, webp



### Image File - Write Animated (Individual Image Durations)

<cb><v>images<>[0].save(<v>...<>, duration = [<v>duration_1<>, <v>duration_2<>, <v>...<>])<>

<cb><v>images<>[0].save(
		<v>file_name<>,
		append_images = <v>images<>[1:],
		duration = <v>durations<>,
		loop = 0,
		save_all = True,
		optimize = True)<>


Writes a list of images to an animated image file for types gif and webp.

Includes individual durations for each image slice.
Delete the previous image or your images will be appended to it.


Duration:

<in-2>Pass in a list of durations.
Values must be >= 20.<>

Supported Extensions:

<in-2>apng, gif, webp<>


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from math import pi, sin

def add_circle(<v>image<>, dimensions):
	Draw(<v>image<>).ellipse(dimensions, 'yellow')
	return <v>image<>

def calculate_y(<v>size<>, x):
	<v>width<>, <v>height<> = <v>size<>
	<v>y_factor<> = 1 / <v>width<> * 2 * pi
	return int( <v>height<> / 2 + sin(<v>x<> * <v>y_factor<>) * <v>height<> / 2)

def calculate_dimensions(size, x):
	return (<v>x<>, <v>calculate_y<>(<v>size<>, <v>x<>), <v>x<> + 20, <v>calculate_y<>(<v>size<>, <v>x<>) + 20)

def generate_images(<v>size<>):
	<v>width<> = <v>size<>[0]
	<v>images<> = []
	<v>background<> = Image.new('RGBA', <v>size<>, '#303030')
	for <v>x<> in range(0, <v>width<>, 10):
		<v>images<>.append(add_circle(<v>background<>.copy(), calculate_dimensions(<v>size<>, <v>x<>)))

	return <v>images<>

<v>images<> = generate_images((<v>160<>, <v>100<>))
<v>durations<> = [<v>20<>, <v>20<>, <v>20<>, <v>40<>, <v>40<>, <v>40<>, <v>60<>, <v>60<>, <v>60<>, <v>80<>, <v>80<>, <v>80<>, <v>80<>, <v>60<>, <v>40<>, <v>20<>]

<v>images<>[0].save(
		"<v>circled.gif<>",
		append_images = <v>images<>[1:],
		duration = <v>durations<>,
		loop = 0,
		save_all = True,
		optimize = True)<>
@
@ .save(), save
@ gifs, webp



# Image Functions
@
@ image-functions-only, image-function-only, manipulation-only



### Image - Create

<cb>= Image.new(<v>mode<>, <v>size<>, <v>color<>)<>

Usage:

<cb>from PIL import Image

= Image.new(<v>mode<>, <v>size<>)
= Image.new(<v>mode<>, <v>size<>, <v>color<>)<>

<table><col><c>mode<><><col>(string)<><col><code>'RGB'
'RGBA'<><>
<col> <>
<col><c>size<><><col>(tuple)<><col><code>(<v>width<>, <v>height<>)<><>
<col> <>
<col>color<><col>(tuple)<><col><code>(<v>red<>, <v>blue<>, <v>green<>)
(<v>red<>, <v>blue<>, <v>green<>, <v>alpha<>)<><><>

Returns: <c>PIL.Image.Image<>


Creates a new image of the given size and color.


Example:

Colored Black:

<cb>from PIL import Image

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (0,0,0))
<v>image<>.show()<>
@
@ new, pil.image.new(), image.new(), .new()



### Image - Create Empty Transparant Image

<cb>= Image.new('RGBA', <v>size<>)<>

Usage:

<cb>from PIL import Image

= Image.new('RGBA', <v>size<>)<>

Returns: <c>PIL.Image.Image<>


Creates a completely transparent image.


Examples:

<cb>from PIL import Image

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>))
<v>image<>.show()<>
@
@ new, pil.image.new(), image.new(), .new()



### Image - Create From Array

<cb>= Image.fromarray(<v>array_1<>, '<v>RGBA<>')<>

Usage:

<cb>from PIL import Image

= Image.fromarray(<v>array_1<>, '<v>mode<>')<>


Returns: <c>PIL.Image.Image<>
@
@ Image.fromarray(), .fromarray(), convert
@ new



### Image - Create From NumPy Array

<cb>= Image.fromarray(<v>numpy_array<>, '<v>RGBA<>')<>

Usage:

<cb>from PIL import Image

= Image.fromarray(<v>numpy_array<>, '<v>mode<>')<>

Returns: <c>PIL.Image.Image<>


Creates an image from a NumPy array.

The array should be of shape (<v>height<>, <v>width<>, 3).

Axis 0 contains the image rows.
Axis 1 contains the column pixels.
Axis 2 contains the [red, green, blue] pixel color data.

Values must be of type <c>np.int8<>.


Example:

Checkered Red and Black Rectangle:

<cb>from PIL import Image
import numpy as np
from numpy import array

<v>data<> = array([
        [(255, 0, 0),
         (255, 0, 0),
         (255, 0, 0),
         (0, 0, 0),
         (0, 0, 0),
         (0, 0, 0)],
        [(255, 0, 0),
         (255, 0, 0),
         (255, 0, 0),
         (0, 0, 0),
         (0, 0, 0),
         (0, 0, 0)],
        [(0, 0, 0),
         (0, 0, 0),
         (0, 0, 0),
         (255, 0, 0),
         (255, 0, 0),
         (255, 0, 0)],
        [(0, 0, 0),
         (0, 0, 0),
         (0, 0, 0),
         (255, 0, 0),
         (255, 0, 0),
         (255, 0, 0)]])

<v>image<> = Image.fromarray(<v>data<>.astype(np.int8), 'RGB')
<v>image<>.show()<>
@
@ Image.fromarray(), .fromarray(), convert
@ new



### Image - Copy

<cb>= <v>image_1<>.copy()<>


Creates a copy of the image.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image_1<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
Draw(<v>image_1<>).rectangle((10, 10, 150, 90), (127, 255, 127))

<v>image_2<> = <v>image_1<>.copy()

<v>image_2<>.show()<>
@
@ image.copy(), .copy()



### Image - Crop

<cb>= <v>image<>.crop((<v>left<>, <v>top<>, <v>right_plus_one<>, <v>bottom_plus_one<>))<>

or

<cb><v>dimensions<> = (<v>left<>, <v>top<>, <v>right_plus_one<>, <v>bottom_plus_one<>)
= image.crop(<v>dimensions<>)<>


Returns: <c>PIL.Image.Image<>


Example:

<cb><v>dimensions<> = (<v>10<>, <v>5<>, <v>30<>, <v>15<>)
<v>cropped<> = image.crop(<v>crop_box<>)<>

Returns Blue Box (Size 20 x 10):

<image "Image - Crop.png">
@
@ .crop()



### Image - Invert

<cb>= ImageOps.invert(<v>image<>)<>

<cb>from PIL.ImageOps import invert

= invert(<v>image<>)<>


Inverts the colors of an image.

Images must be 'RGB' only.
Will not correctly process images with tranparancies.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageOps import invert

<v>image_1<> = Image.new('RGB', (<v>160<>, <v>100<>), 'darkgrey')
Draw(<v>image_1<>).rectangle((10, 10, 30, 30), 'lime')

<v>inverted<> = invert(<v>image_1<>)
<v>inverted<>.show()<>
@
@ pil.imageops.invert(), imageops.invert(), .invert()
@ colors, inverse



### Image - Invert With Transparancy

Use This Function:

<cb>from PIL.Image import merge
from PIL import ImageOps

def invert(<v>image<>):
	if <v>image<>.mode != 'RGBA':
		return ImageOps.invert(<v>image<>)
	<v>red<>, <v>green<>, <v>blue<>, <v>alpha<> = <v>image<>.split()
	<v>inverted_image<> = ImageOps.invert(merge('RGB', (<v>red<>, <v>green<>, <v>blue<>)))
	<v>inverted_red<>, <v>inverted_green<>, <v>inverted_blue<> = <v>inverted_image<>.split()
	return merge('RGBA', (<v>inverted_red<>, <v>inverted_green<>, <v>inverted_blue<>, <v>alpha<>))

= invert(<v>image<>)<>


Inverts an 'RGBA' image, an image with transparancies.

Pillow does not seem to have a reliable way to invert images with transparancies at the time of this example.
(Tried ImageChops.invert()... nope!)


Example:

<cb>from PIL import Image
from PIL import ImageOps
from PIL.Image import merge
from PIL.ImageDraw import Draw

def invert(<v>image<>):
	if <v>image<>.mode != 'RGBA':
		return ImageOps.invert(<v>image<>)
	<v>red<>, <v>green<>, <v>blue<>, <v>alpha<> = <v>image<>.split()
	<v>inverted_image<> = ImageOps.invert(merge('RGB', (<v>red<>, <v>green<>, <v>blue<>)))
	<v>inverted_red<>, <v>inverted_green<>, <v>inverted_blue<> = <v>inverted_image<>.split()
	return merge('RGBA', (<v>inverted_red<>, <v>inverted_green<>, <v>inverted_blue<>, <v>alpha<>))

<v>image_1<> = Image.new('RGBA', (<v>160<>, <v>100<>), 'darkgrey')
Draw(<v>image_1<>).rectangle((10, 10, 30, 30), 'lime')

<v>inverted<> = invert(<v>image_1<>)
<v>inverted<>.show()<>
@
@ pil.imageops.invert(), imageops.invert(), .invert()
@ pil.imagechops.invert(), imagechops.invert()
@ colors, inverse



### Image - Paste Into Image

<cb>= <v>base_image<>.paste(<v>insert_image<>, (<v>x<>, <v>y<>), <v>insert_image<>)<>

Pastes an image onto another image.

The inserted image must be in RGBA format.
The base image must NOT contain an alpha channel.
Transparent areas will let the base image through.
(<v>x<>, <v>y<>) set the top left position of the inserted image in the base image.
@
@ another, background, foreground, paste, merge, copy, insert
@ image.paste(), .paste()



### Image - Mirror Horizontally

<cb>= ImageOps.mirror(<v>image_1<>)<>

<cb>from PIL.ImageOps import mirror

= mirror(<v>image<>)<>


Mirrors an image horizontally.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageOps import mirror

<v>image_1<> = Image.new('RGBA', (<v>160<>, <v>100<>), 'darkgrey')
Draw(<v>image_1<>).rectangle((10, 10, 30, 30), 'lime')

<v>mirrored<> = mirror(<v>image_1<>)
<v>mirrored<>.show()<>
@
@ pil.imageops.mirror(), imageops.mirror(), .mirror()
@ flip, mirror, reverse, swap



### Image - Mirror Vertically

<cb>= ImageOps.flip(<v>image_1<>)<>

<cb>from PIL.ImageOps import flip

= flip(<v>image<>)<>


Mirrors an image vertically.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageOps import flip

<v>image_1<> = Image.new('RGBA', (<v>160<>, <v>100<>), 'darkgrey')
Draw(<v>image_1<>).rectangle((10, 10, 30, 30), 'lime')

<v>mirrored<> = flip(<v>image_1<>)
<v>mirrored<>.show()<>
@
@ pil.imageops.flip(), imageops.flip(), .flip()
@ flip, mirror, reverse, swap



### Image - Resize

<cb><v>image_1<>.resize((<v>width<>, <v>height<>), <v>resize_algorithm<>)		<#>#1<><>


Returns: <c>PIL.Image.Image<>


<c><v>resize_algorithm<><>:

<cb>Resampling.ANTIALIASED
Resampling.BICUBIC
Resampling.BILINEAR
Resampling.BOX
Resampling.HAMMING
Resampling.LANCZOS
Resampling.NEAREST<>

See: <l "?q=resampling-only">Resampling Filters<> (Below)


\#1  -  <c><v>width<><> and <c><v>height<><> must be integers.


Example:

<cb><v>resized<> = <v>image_1<>.resize((160, 90), Image.Resampling.LANCZOS)<>
@
@ resample


### Image - Rotate

<cb>= <v>image_1<>.rotate(<v>degrees<>)<>

<cb>= <v>image_1<>.rotate(<v>degrees<>, expand = True)
= <v>image_1<>.rotate(<v>degrees<>, fillcolor = <v>color<>)
= <v>image_1<>.rotate(<v>degrees<>, center = (<v>x<>, <v>y<>)<>


Rotates an image counter-clockwise.

If <c>expand = True<>, expands the image to fit the rotation.
Use <c>fillcolor<> to set the color of any area not covered by the rotating image (defaults to transparent).
Set <c>center<> to set the rotation point (defaults to the image center).


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageOps import mirror

<v>image_1<> = Image.new('RGBA', (<v>160<>, <v>100<>), 'darkgrey')
Draw(<v>image_1<>).rectangle((10, 10, 30, 30), 'lime')

<v>rotated<> = <v>image_1<>.rotate(<v>45<>, expand = True, fillcolor = 'blue')
<v>rotated<>.show()<>
@
@ pil.imageops.mirror(), imageops.mirror(), .mirror()
@ flip, mirror, reverse, swap



### Image - Insert Image

<cb><v>target_image<>.paste(<v>insert_image<>, <v>position<>)<>

<cb><v>target_image<>.paste(<v>insert_image<>, (<v>left<>, <v>top<>))<>


Inserts an image onto a second image.

The position defines the top left coordinate of the inserted image.


Example:

<cb>from PIL import Image

<v>main_image<> = Image.new('RGBA', (160, 100), 'dimgrey')
<v>insert_image<> = Image.new('RGBA', (80, 50), 'lime')

<v>main_image<>.paste(<v>insert_image<>, (10, 20))

<v>main_image<>.show()<>
@
@ paste, 2nd, second, another, on top of
@ image.paste(), .paste()



### Image - Blend Images

<cb>= Image.blend(<v>image_1<>, <v>image_2<>, <v>alpha<>)<>

Usage:

<cb>from PIL import Image

<v>blended<> = Image.blend(<v>image_1<>, <v>image_2<>, <v>alpha<>)<>


Blends two images together.
Images must be in "RGBA" form.
The blend rate from one image to the other is determined by the <c><v>alpha<><> value.


<c><v>alpha<><>:

<in-2>A value between 0 and 1.

<table><col>0.0<><col>1st Image Only<>
<col>0.5<><col>50/50 Blent of Both<>
<col>1.0<><col>2nd Image Only<><><>


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw	

<v>image_1<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), 'dimgrey')
<v>image_2<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), 'dimgrey')

Draw(<v>image_1<>).ellipse((10, 10, 90, 90), 'red')
Draw(<v>image_2<>).ellipse((70, 10, 150, 90), 'lime')

<v>blended<> = Image.blend(<v>image_1<>, <v>image_2<>, 0.5)

<v>blended<>.show()<>
@
@ Image.blend(), .blend(), merge



### Image - To Grey Scale

<cb>= <v>image<>.convert('L')<>


Converts an image into grey scale.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.rectangle((10, 10, 150, 90), fill = (127, 255, 127))

<v>grey_scale<> = <v>image<>.convert('L')

<v>image<>.show()
<v>grey_scale<>.show()<>
@
@ black and white, gray, convert, conversion
@ image.convert(), 'L'



### Image - To List

<cb>= list(<v>image<>.getdata())<>


Returns a list of image pixel values.

The list is one dimensional, with length = number of pixels.
If the image is 'RGB', each value will be an RGB tuple.
If the image is 'RGBA', each value will be an RGBA tuple.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new('RGB', (6,4))
<v>draw<> = Draw(<v>image<>)
<v>draw<>.rectangle((0, 0, 2, 1), 'red')
<v>draw<>.rectangle((3, 2, 5, 3), 'red')

<v>data<> = list(<v>image<>.getdata())

<#># Returns: [255, 255, 255, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 255, 255, 255]<><>
@
@ image.getdata(), .getdata(), getdata
@ convert, conversion, raw data



### Image - To RGB

<cb>= <v>image_1<>.convert('RGB')<>
@
@ to, rgb, convert, conversion
@ image.convert(), .convert(), 'RGB'



### Image - To RGBA

<cb>= <v>image_1<>.convert('RGBA')<>
@
@ to, rgba, convert, conversion
@ image.convert(), .convert(), 'RGBA'



### Image - View

<cb><v>image<>.show()<>

Shows the image in using the default OS viewer.

@
@ .show(), show, display



# Image Properties
@
@ property-only, properties-only
@ image-property-only, image-properties-only
@ get



### Image Properties - Color Channels

<cb>= <v>image<>.split()<>

Returns: <c>tuple of PIL.Image.Image<>


Returns the image split into color channels.

The channels are returned as a tuple.
Each channel is returned as a new gray scale image.
'RGB' images return 3 channels.
'RGBA' images return 4 channels.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new('RGB', (6,4))
<v>draw<> = Draw(<v>image<>)
<v>draw<>.rectangle((0, 0, 2, 1), 'red')
<v>draw<>.rectangle((3, 2, 5, 3), 'red')

<v>red<>, <v>green<>, <v>blue<> = <v>image<>.split()

print(list(<v>red<>.getdata()))

<#># Prints: [255, 255, 255, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 255, 255, 255]<><>
@
@ image.split(), .split()
@ separate color channels, rgb, rgba



### Image Properties - Size

<cb>= <v>image<>.size<>

<cb><v>width<>, <v>height<> = <v>image<>.size<>

Returns: <c>tuple (width, height)<>
@
@ width, height



### Image Properties - Size, Height

<cb>= <v>image<>.size[1]<>



### Image Properties - Size, Width

<cb>= <v>image<>.size[0]<>



# Image Drawing Functions
@
@ add
@ draw-only, drawing-only


### Draw - Arc

<cb><v>draw_1<>.arc((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>start_degree<>, <v>end_degree<>, <v>color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.arc(<v>dimensions<>, <v>start_degree<>, <v>end_degree<>, <v>color<>)
<v>draw<>.arc((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>start_degree<>, <v>end_degree<>, <v>color<>)<>


Draws a 1 pixel wide arc.

The arc is carved with given angle and center in the middle of the dimensions.
The degrees are measured clockwise from 3 o'clock. <s>(why??!!)<>

3 o'clock = 0
6 o'clock = 90


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.arc((<v>40<>, <v>10<>, <v>120<>, <v>90<>), <v>0<>, <v>60<>, '<v>lime<>')

<v>image<>.show()<>
@
@ arcs, circumference, curve
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.arc(), .arc()



### Draw - Chord

<cb><v>draw_1<>.chord((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>start_degree<>, <v>end_degree<>, <v>fill_color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.chord(<v>dimensions<>, <v>start_degree<>, <v>end_degree<>, <v>fill_color<>)
<v>draw<>.chord(<v>dimensions<>, <v>start_degree<>, <v>end_degree<>, <v>fill_color<>, <v>outline_color<>)
<v>draw<>.chord((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>start_degree<>, <v>end_degree<>, <v>fill_color<>)<>


Draws a partial circle.

Draws an arc, connects the two end points and fills in the enclosed area.
The arc is carved with given angle and center in the middle of the dimensions.
The degrees are measured clockwise from 3 o'clock. <s>(why??!!)<>

3 o'clock = 0
6 o'clock = 90


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.chord((<v>40<>, <v>10<>, <v>120<>, <v>90<>), <v>0<>, <v>-135<>, '<v>lime<>', '<v>green<>')

<v>image<>.show()<>
@
@ arcs, circumference, curve
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.chord(), .chord()



### Draw - Ellipse

<cb><v>draw_1<>.ellipse(<v>dimensions<>, <v>fill_color<>)<>

<cb><v>draw_1<>.ellipse((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>fill_color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.ellipse(<v>dimensions<>, <v>fill_color<>)
<v>draw<>.ellipse(<v>dimensions<>, <v>fill_color<>, <v>outline_color<>)
<v>draw<>.ellipse(<v>dimensions<>, fill = <v>fill_color<>, outline = <v>outline_color<>)<>


<c><v>dimensions<><> (tuple):

<cb>= (<v>left<>, <v>top<>, <v>right<>, <v>bottom<>)
= ((<v>left<>, <v>top<>), (<v>right<>, <v>bottom<>))<>


Fills in an elliptical or circular area in the image.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), (127, 255, 127))

<v>image<>.show()<>
@
@ fill, circles, ellipses, ovals
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.ellipse(), draw.create_oval(), .ellipse(), .create_oval()



### Draw - Line

<cb><v>draw_1<>.line(<v>dimensions<>, <v>fill_color<>)<>

<cb><v>draw_1<>.line((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>fill_color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.line(<v>dimensions<>, <v>fill_color<>)
<v>draw<>.line(<v>dimensions<>, <v>fill_color<>, <v>width<>)
<v>draw<>.line(<v>dimensions<>, fill = <v>fill_color<>, width = <v>width<>)<>


<c><v>dimensions<><> (tuple):

<cb>= (<v>left<>, <v>top<>, <v>right<>, <v>bottom<>)
= ((<v>left<>, <v>top<>), (<v>right<>, <v>bottom<>))<>


Draws a line in the image.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.line((10, 10, 150, 90), (127, 255, 127))

<v>image<>.show()<>
@
@ fill, lines, width, wide
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.line(), .line(), draw.create_line(), .create_line()



### Draw - Line - Multiple Lines

<cb><v>draw_1<>.line(<v>xy_points<>, <v>fill_color<>)<>

<cb><v>draw_1<>.line(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), <v>fill_color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.line(<v>xy_points<>, <v>fill_color<>)
<v>draw<>.line(<v>xy_points<>, <v>fill_color<>, <v>width<>)
<v>draw<>.line(<v>xy_points<>, fill = <v>fill_color<>, width = <v>width<>)
<v>draw<>.line(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), fill = <v>fill_color<>, width = <v>width<>)<>


Draws a series of connected lines in the image.


Examples:

Passing Tuple of XY Points:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>xy_points<> = ((10, 10), (150, 50), (10, 90))
<v>yellow<> = (255, 255, 0)

<v>draw<> = Draw(<v>image<>)
<v>draw<>.line(<v>xy_points<>, <v>yellow<>)

<v>image<>.show()<>

Passing Directly:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.line(((10, 10), (150, 50), (10, 90)), (255, 255, 0))

<v>image<>.show()<>
@
@ fill, width, wide
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.line(), .line()



### Draw - Line - Multiple Lines, Curved Joins

<cb><v>draw_1<>.line(<v>xy_points<>, <v>fill_color<>, <v>width<>, joint = 'curve')<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.line(<v>xy_points<>, <v>fill_color<>, <v>width<>, joint = 'curve')
<v>draw<>.line(<v>xy_points<>, fill = <v>fill_color<>, width = <v>width<>, joint = 'curve')<>


Draws a series of connected lines where the joints are rounded.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>320<>, <v>200<>), (64, 64, 64))

<v>xy_points<> = ((300, 100), (20, 100), (90, 20), (90, 180), (230, 20), (230, 180))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.line(<v>xy_points<>, fill='yellow', width=10, joint='curve')

<v>image<>.show()<>
@
@ fill, width, wide
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.line(), .line()
@ joint='curve', joint, 'curve'
@ rounded joins



### Draw - Pie Slice

<cb><v>draw_1<>.pieslice((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>start_degree<>, <v>end_degree<>, <v>color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.pieslice(<v>dimensions<>, <v>start_degree<>, <v>end_degree<>, <v>color<>)
<v>draw<>.pieslice((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>start_degree<>, <v>end_degree<>, <v>color<>)<>


Draws a wedge or pie slice.

The degrees are the angle carved by the slice centered in the given dimensions.
The angles are calculated clockwise from 3 o'clock. <s>(why??!!)<>

3 o'clock = 0
6 o'clock = 90


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.pieslice((<v>40<>, <v>10<>, <v>120<>, <v>90<>), <v>0<>, <v>60<>, '<v>lime<>')

<v>image<>.show()<>
@
@ packman, circumference, partial, semicircle, semi-circle, wedge
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.pieslice(), .pieslice()



### Draw - Point

<cb><v>draw_1<>.point((<v>x<>, <v>y<>), <v>color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.point((<v>x1<>, <v>y1<>), fill = <v>color<>)<>


Draws a point in the image.
A point is one pixel in size (can't adjust width).


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.point((10, 20), (127, 255, 127))

<v>image<>.show()<>
@
@ points, dots
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.point(), .point()



### Draw - Point - Multiple Points

<cb><v>draw_1<>.point(<v>xy_points<>, <v>color<>)<>

<cb><v>draw_1<>.point(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), <v>color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.point(<v>xy_points<>, <v>color<>)
<v>draw<>.point(<v>xy_points<>, fill = <v>color<>)
<v>draw<>.point(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), fill = <v>color<>)<>


Draws multiple points at once on the image.
Each point is one pixel in size (can not adjust width).


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.point(((20, 20), (20, 40), (20, 60)), (255, 255, 0))

<v>image<>.show()<>
@
@ fill
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.point(), .point()



### Draw - Polygon

<cb><v>draw_1<>.polygon(<v>xy_points<>, <v>color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.polygon(<v>points<>, <v>color<>, <v>color<>)
<v>draw<>.polygon(<v>points<>, fill = <v>color<>, outline = <v>color<>)
<v>draw<>.polygon(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), fill = <v>color<>)<>


Draws a polygon in the image.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)

<v>draw<>.polygon(
		((80, 20), (80, 80), (20, 50)),
		fill = 'yellow')

<v>image<>.show()<>
@
@ fill, polygons, shapes
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.polygon(), .polygon()



### Draw - Polygon Outline

Use <c>line()<>:

<cb><v>draw_1<>.line(<v>xy_points<>, <v>fill_color<>)<>

<cb><v>draw_1<>.line(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), <v>fill_color<>)<>

Use the line() method and pass in a list of (x, y) points.

Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)

<v>draw<>.polygon(
		((80, 20), (80, 80), (20, 50)),
		width = 5,
		outline = 'yellow')

<v>image<>.show()<>
@
@ polygons, image.line(), .line()
@ draw.line(), .line()



### Draw - Rectangle

<cb><v>draw_1<>.rectangle(<v>dimensions<>, <v>fill_color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.rectangle(<v>dimensions<>, <v>fill_color<>)
<v>draw<>.rectangle(<v>dimensions<>, <v>fill_color<>, <v>outline_color<>)
<v>draw<>.rectangle(<v>dimensions<>, fill = <v>fill_color<>, outline = <v>outline_color<>)<>


Fills in a rectangular area in the image.


<c>dimensions<> (tuple):

<cb>= (<v>upper_left_x<>, <v>upper_left_y<>, <v>lower_right_x<>, <v>lower_right_y<>)
= ((<v>upper_left_x<>, <v>upper_left_y<>), (<v>lower_right_x<>, <v>lower_right_y<>))<>



Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.rectangle((10, 10, 150, 90), fill = (127, 255, 127))

<v>image<>.show()<>
@
@ fill, box, squares, rectangles
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.rectangle(), .rectangle()



### Draw - Rectangle With Rounded Corners

<cb><v>draw_1<>.rounded_rectangle(<v>dimensions<>, <v>radius<>, <v>fill_color<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw

<v>draw<> = Draw(<v>image_1<>)

<v>draw<>.rounded_rectangle(<v>dimensions<>, <v>radius<> <v>fill_color<>)
<v>draw<>.rounded_rectangle(<v>dimensions<>, <v>radius<>, <v>fill_color<>, <v>outline_color<>, <v>width<>)
<v>draw<>.rounded_rectangle(<v>dimensions<>, radius = <v>width<>, fill = <v>fill_color<>, outline = <v>outline_color<>)<>


Fills in a rectangular area in the image.


<c>dimensions<> (tuple):

<cb>= (<v>upper_left_x<>, <v>upper_left_y<>, <v>lower_right_x<>, <v>lower_right_y<>)
= ((<v>upper_left_x<>, <v>upper_left_y<>), (<v>lower_right_x<>, <v>lower_right_y<>))<>



Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.rounded_rectangle((10, 10, 150, 90), radius = <v>5<>, fill = (127, 255, 127))

<v>image<>.show()<>
@
@ fill, box, squares, rectangles
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ draw.rounded_rectangle(), .rounded_rectangle()



### Draw - Text

<cb>= <v>draw<>.text((<v>x<>, <v>y<>), '<v>text<>', <v>color<>, font = <v>font<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw
from PIL.ImageFont import truetype

<v>draw<> = Draw(<v>image_1<>)
<v>draw<>.text((<v>x<>, <v>y<>), '<v>text<>', <v>color<>, font = <v>font<>)
<v>draw<>.text((<v>x<>, <v>y<>), '<v>text<>', <v>color<>, font = truetype('<v>font_name<>', <v>font_size<>))<>


Adds text to an image.

<c>x<>, <v>y<> defines the top, left corner.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageFont import truetype

<v>font<> = truetype('<v>Helvetica<>', <v>16<>)

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
<v>draw<> = Draw(<v>image<>)
<v>draw<>.text((<v>10<>, <v>10<>), '<v>Image Text<>', '<v>lime<>', font = <v>font<>)

<v>image<>.show()<>
@
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ pil.ImageFont.truetype(), ImageFont.truetype(), .truetype()
@ draw.text(), .text()
@ string, font



### Draw - Text - Get Width, Height

<cb><v>width<>, <v>height<> = <v>draw<>.textsize('<v>text<>', font = <v>font<>)<>

Usage:

<cb>from PIL.ImageDraw import Draw
from PIL.ImageFont import truetype

<v>draw<> = Draw(<v>image_1<>)
<v>width<>, <v>height<> = <v>draw<>.textsize('<v>text<>', font = <v>font<>)
<v>width<>, <v>height<> = <v>draw<>.textsize('<v>text<>', font = truetype('<v>font_name<>', <v>font_size<>))<>


Returns the width and height of the rendered text in pixels.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageFont import truetype

<v>font<> = truetype('<v>Helvetica<>', <v>16<>)

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
<v>draw<> = Draw(<v>image<>)
<v>width<>, <v>height<> = <v>draw<>.textsize('<v>Image Text<>', font = <v>font<>)

print(f'width x height: {width} x {height}')

<#># Prints: width x height: 79 x 16<><>
@
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ pil.ImageFont.truetype(), ImageFont.truetype(), .truetype()
@ draw.text(), .text()
@ string, font



# Tools
@
@ tools-only


### Color - Get RGB From Hex Value

<cb>= ImageColor.getrgb('#<v>hex_value<>')<>

With Import

<cb>from PIL import ImageColor

= ImageColor.getrgb('#<v>hex_value<>')<>


Retrieves the color value for the given hex value.


Example:

<cb>from PIL import Image, ImageColor
from PIL.ImageDraw import Draw

<v>MAGENTA<> = ImageColor.getrgb('#<v>FF00FF<>')

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
Draw(<v>image<>).ellipse((40, 10, 120, 90), <v>MAGENTA<>)

<v>image<>.show()<>
@
@ named, #



### Color - Get RGB From Name

<cb>= ImageColor.getrgb('<v>color_name<>')<>

With Import:

<cb>from PIL import ImageColor

= ImageColor.getrgb('<v>color_name<>')<>


Returns the color value for a named color.


Example Names:

<in><card><table><col><c>'Green'<><><col><green>●<><>
<col><c>'DarkGreen'<><><col><darkgreen>●<><>
<col><c>'Lime'<><><col><lime>●<><>
<col><c>'OliveDrab'<><><col><olivedrab>●<><><><><>



Example:

<cb>from PIL import Image, ImageColor
from PIL.ImageDraw import Draw

<v>MAGENTA<> = ImageColor.getrgb('<v>magenta<>')

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
Draw(<v>image<>).ellipse((40, 10, 120, 90), <v>MAGENTA<>)

<v>image<>.show()<>
@
@ named



### Font - Get

<cb>= truetype(<v>font_name<>, <v>font_size<>)<>

Usage:

<cb>from PIL.ImageFont import truetype

= truetype(<v>font_name<>, <v>font_size<>)<>


Returns a font usable for adding text to an image.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw
from PIL.ImageFont import truetype

<v>font<> = truetype('<v>Helvetica<>', <v>16<>)

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
<v>draw<> = Draw(<v>image<>)
<v>draw<>.text((<v>10<>, <v>10<>), '<v>Image Text<>', '<v>lime<>', font = <v>font<>)

<v>image<>.show()<>
@
@ pil.ImageFont.truetype(), ImageFont.truetype(), .truetype()



# How To
@
@ how-to, how-tos, how-to-only, how-tos-only



### Image - Antialias

Can only be done by super sampling.

<cb><v>antialiased<> = <v>image<>.resize(
		(<v>width<> // 2, <v>height<> // 2),
		resample = Resampling.LANCZOS)<>


Use the Lanczos resampling filter to resample the image.


Example:

<cb>from PIL import Image
from PIL.Image import Resampling
from PIL.ImageDraw import Draw

<v>width<> = 640
<v>height<> = 400

<v>image<> = Image.new(<v>'RGBA'<>, (<v>width<>, <v>height<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)

<v>draw<>.line(
		((20, 20), (620, 200), (20, 380), (20, 20)),
		fill = (255, 255, 0),
		width = 10)

<v>antialiased<> = image.resize(
		(<v>width<> // 2, <v>height<> // 2),
		resample = Resampling.LANCZOS)

<v>antialiased<>.show()<>
@
@ antialiasing, antialiased, anti-aliasing, anti-aliased
@ Resampling.ANTIALIAS, resample



### Image - Create Image - Black and White - From List

<cb><v>image<> = Image.new('L', (<v>width<>, <v>height<>))
<v>image<>.putdata(<v>pixels<>)<>

Usage:

<cb>from PIL import Image

<v>image<> = Image.new('L', (<v>width<>, <v>height<>))
<v>image<>.putdata(<v>pixels<>)<>


Creates a black and white image from a list of values.

The list must be 1 dimensional.
The values must be integers.


Example:

Checkered Black and White Rectangle:

<cb>from PIL import Image

<v>width<> = 6
<v>height<> = 4

<v>data<> = [255, 255, 255,   0,   0,   0,
		255, 255, 255,   0,   0,   0,
		  0,   0,   0, 255, 255, 255,
		  0,   0,   0, 255, 255, 255]

<v>image<> = Image.new('L', (<v>width<>, <v>height<>))
<v>image<>.putdata(<v>data<>)
<v>image<>.show()<>



### Image - Create Image - RGB - From List

<cb><v>image<> = Image.new('RGB', (<v>width<>, <v>height<>))
<v>image<>.putdata(<v>rgb_pixels<>)<>

Usage:

<cb>from PIL import Image

<v>image<> = Image.new('RGB', (<v>width<>, <v>height<>))
<v>image<>.putdata(<v>rgb_pixels<>)<>


Creates an image from a list of RGB values.

The list must be 1 dimensional.
The values must be RGB tuples (lists are not accetped).


Example:

Checkered Red and Black Rectangle:

<cb>from PIL import Image

<v>width<> = 6
<v>height<> = 4

<v>data<> = [(255, 0, 0),
        (255, 0, 0),
        (255, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (255, 0, 0),
        (255, 0, 0),
        (255, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (255, 0, 0),
        (255, 0, 0),
        (255, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (0, 0, 0),
        (255, 0, 0),
        (255, 0, 0),
        (255, 0, 0)]

<v>image<> = Image.new('RGB', (<v>width<>, <v>height<>))
<v>image<>.putdata(<v>data<>)
<v>image<>.show()<>
@
@ image.putdata(), .putdata(), putdata()
@ from list, red, green, blue



### Image - Create Image - RGB - From Numpy Color Channels

<cb><v>rgb<> = np.concatenate(
		(<v>red<>[:,:,newaxis],
		 <v>blue<>[:,:,newaxis],
		 <v>green<>[:,:,newaxis]),
		axis = 2)

= Image.fromarray(<v>rgb<>.astype(np.int8))<>


Convert the raw channel data into a grid of RGB pixels.
Then create the image with <c>.fromarray()<>.
Ensure the data is of type <c>np.int8<>.

Each channel should be of shape (<v>height<>, <v>width<>).
Each color should be in range 0 - 255.


Example:

<cb>import numpy as np
from numpy import array, newaxis
from PIL import Image

<v>red<> = array([
    [255, 255, 255, 0, 0, 0],
    [255, 255, 255, 0, 0, 0],
    [0, 0, 0, 255, 255, 255],
    [0, 0, 0, 255, 255, 255]])

<v>green<> = array([
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]])

<v>blue<> = array([
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]])

<v>rgb_data<> = np.concatenate(
		(<v>red<>[:,:,newaxis],
		 <v>blue<>[:,:,newaxis],
		 <v>green<>[:,:,newaxis]), axis = 2)

<v>image<> = Image.fromarray(<v>rgb_data<>.astype(np.int8), 'RGB')
<v>image<>.show()<>
@
@ pil.image.fromarray(), image.fromarray(), .fromarray()
@ numpy, np
@ arrays, red, green, blue



### Image Effect - Gradient Background

Stack Overflow:
<l>https://stackoverflow.com/questions/32530345/pil-generating-vertical-gradient-image<>

Or Simpler(?):
<l>https://gist.github.com/weihanglo/1e754ec47fdd683a42fdf6a272904535<>
@
@ add


# Reference - Data Types
@
@ data-type-only, data-types-only


### Color Type

<cb>= (<v>red<>, <v>green<>, <v>blue<>)
= (<v>red<>, <v>green<>, <v>blue<>, <v>saturation<>)

= '#<v>FFFFFF<>'

= '<v>ColorName<>'<>


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>210<>, <v>100<>), (64, 64, 64, 255))

<v>draw<> = Draw(<v>image<>)

<v>draw<>.rectangle((10, 10, 30, 90), (255, 255, 0, 0))
<v>draw<>.rectangle((40, 10, 60, 90), (255, 255, 0, 127))
<v>draw<>.rectangle((70, 10, 90, 90), (255, 255, 0, 255))

<v>draw<>.rectangle((120, 10, 140, 90), (255, 0, 0))
<v>draw<>.rectangle((150, 10, 170, 90), "#00FF00")
<v>draw<>.rectangle((180, 10, 200, 90), 'blue')

<v>image<>.show()<>



### Color Type - By Channel Value

<cb>= (<v>red<>, <v>green<>, <v>blue<>)<>

<cb>= (<v>red<>, <v>green<>, <v>blue<>, <v>saturation<>)<><>

Color is a three or four value tuple.
All values range from 0 to 255.


Example:

<cb><v>magenta<> = (<v>255<>, <v>0<>, <v>255<>)<>

50% Saturation:

<cb><v>magenta<> = (<v>255<>, <v>0<>, <v>255<>, <v>127<>)<>


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64, 255))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.ellipse((10, 10, 90, 90), (255, 0, 0))
<v>draw<>.ellipse((70, 10, 150, 90), (255, 255, 255, 64))

<v>image<>.show()<>



### Color Type - By Hex Value

<cb>= '#<v>FFFFFF<>'<>


You can define a color as a hash followed by a six digit hex value.


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), '#<v>FFFF00<>')

<v>image<>.show()<>



### Color Type - By Name

<cb>= '<v>ColorName<>'<>


You can use a standard web color name passed as a string.


Example:

<in><card><table><col><c>'Red'<><><col><red>●<><>
<col><c>'DarkRed'<><><col><darkred>●<><>
<col><c>'Crimson'<><><col><crimson>●<><>
<col><c>'Firebrick'<><><col><firebrick>●<><><><><>


See full list of color names below:

	<l pillow?search=color+names>Reference - Color Names<><>


Example:

<cb>from PIL import Image
from PIL.ImageDraw import Draw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), '<v>crimson<>')

<v>image<>.show()<>



### Point Type

<cb>= (<v>x<>, <v>y<>)<>

Defines the x and y co-ordinates of a point.


Example:

<cb><v>point<> = (<v>160<>, <v>100<>)



### Rectangle / Dimensions Type

<cb>= (<v>upper_left_x<>, <v>upper_left_y<>, <v>lower_right_x<>, <v>lower_right_y<>)
= ((<v>upper_left_x<>, <v>upper_left_y<>), (<v>lower_right_x<>, <v>lower_right_y<>))<>

Defines the top left and bottom right corners of a rectangle.


Example:

<cb><v>dimensions<> = (<v>10<>, <v>10<>, <v>160<>, <v>100<>)
@
@ box, dimensions



### Size Type

<cb>= (<v>width<>, <v>height<>)<>

Size is a two value tuple.
Defines the size of the image in pixels.


Example:

<cb><v>size<> = (<v>160<>, <v>100<>)<>



# Reference - Types as Named Tuples

Named tuples can be used to make the values easier to work with.
Here are the principle data types defined as named tuples.
@
@ namedtuple, nametuple-only, named-types-only


### Named Tuples - All

<cb>from collections import namedtuple

<v>AlphaColor<> = namedtuple("AlphaColor", ["red", "green", "blue", "alpha"])
<v>Color<> = namedtuple("Color", ["red", "green", "blue"])

<v>Point<> = namedtuple("Point", ["x", "y"])
<v>Size<> = namedtuple("Size", ["width", "height"])
<v>Dimensions<> = namedtuple("Dimensions", ["x1", "y1", "x2", "y2"])<>



### Named Tuple - Color

<cb>= Color(<v>red<>, <v>green<>, <v>blue<>)<>

Define Type:

<cb>from collections import namedtuple

<v>Color<> = namedtuple("Color", ["red", "green", "blue"])<>

Use:

<cb><v>yellow<> = Color(<v>255<>, <v>255<>, <v>0<>)

<v>image<> = Image.new('RGBA', (160, 100), <v>yellow<>)
<v>red_channel<> = <v>yellow<>.red<>


This is a drop in replacement for the (red, green, blue) alpha color tuple.
To make working with color data easier, create this namedtuple and use in place of plain color tuples.


Example:

<cb>from collections import namedtuple
from PIL import Image

Color = namedtuple("Color", ["red", "green", "blue"])

<v>yellow<> = Color(<v>255<>, <v>255<>, <v>0<>)

<v>image<> = Image.new('RGBA', (160, 100), <v>yellow<>)
<v>image<>.show()

print("Yellow :", <v>yellow<>, ":", <v>yellow<>.red, <v>yellow<>.green, <v>yellow<>.blue)

<#># Prints:
\# "Yellow : Color(red=255, green=255, blue=0) : 255 255 0"<><>



### Named Tuple - Color With Alpha Channel

<cb>= AlphaColor(<v>red<>, <v>green<>, <v>blue<>, <v>alpha<>)<>

Define Type:

<cb>from collections import namedtuple

<v>AlphaColor<> = namedtuple("AlphaColor", ["red", "green", "blue", "alpha"])<>

Use:

<cb><v>yellow<> = AlphaColor(<v>255<>, <v>255<>, <v>0<>, <v>255<>)

<v>image<> = Image.new('RGBA', (160, 100), <v>yellow<>)
<v>alpha_channel<> = <v>yellow<>.alpha<>


This is a drop in replacement for the (red, green, blue, alpha) alpha color tuple.
To make working with color data easier, create this namedtuple and use in place of plain color tuples.


Example:

<cb>from collections import namedtuple
from PIL import Image

AlphaColor = namedtuple("AlphaColor", ["red", "green", "blue", "alpha"])

<v>yellow<> = AlphaColor(<v>255<>, <v>255<>, <v>0<>, <v>255<>)

image = Image.new('RGBA', (160, 100), <v>yellow<>)
image.show()

print("Yellow :", <v>yellow<>, ":", <v>yellow<>.red, <v>yellow<>.green, <v>yellow<>.blue, <v>yellow<>.alpha)

<#># Prints:
\# "Yellow : AlphaColor(red=255, green=255, blue=0, alpha=255) : 255 255 0 255"<><>
@
@ alphacolor



### Named Tuple - Point

<cb>= Point(<v>x<>, <v>y<>)<>

Define Type:

<cb>from collections import namedtuple

<v>Point<> = namedtuple("Point", ["x", "y"])<>

Use:

<cb><v>point_1<> = Point(<v>10<>, <v>20<>)

<v>x<> = <v>point_1<>.x<>


This is a drop in replacement for the (x, y) point tuple.
To make working with point data easier, create this namedtuple and use in place of plain point tuples.


Example:

<cb>from collections import namedtuple
from PIL import Image
from PIL.ImageDraw import Draw	

Point = namedtuple("Point", ["x", "y"])

<v>image<> = Image.new('RGBA', (160, 100), 'dimgrey')

<v>point_1<> = Point(40, 25)

Draw(<v>image<>).point(<v>point_1<>, 'yellow')
<v>image<>.show()

print(<v>point_1<>, ":", <v>point_1<>.x, <v>point_1<>.y)

<#># Prints: "Point(x=40, y=25) : 40 25"<><>



### Named Tuple - Rectangle

<cb>= Rectangle(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>)<>

Define Type:

<cb>from collections import namedtuple

<v>Rectangle<> = namedtuple("Rectangle", ["x1", "y1", "x2", "y2"])<>

Use:

<cb><v>rectangle_1<> = Rectangle(<v>0<>, <v>0<>, <v>20<>, <v>40<>)

Draw(<v>image<>).eclipse(<v>rectangle_1<>, <v>color<>)
<v>x1<> = <v>rectangle_1<>.x1<>


This is a drop in replacement for the (x1, y1, x2, y2) dimension tuple.
To make working with dimension data easier, create this namedtuple and use in place of plain dimensional tuples.


Example:

<cb>from collections import namedtuple
from PIL import Image
from PIL.ImageDraw import Draw

Rectangle = namedtuple("Rectangle", ["x1", "y1", "x2", "y2"])

<v>rectangle_1<> = Rectangle(<v>40<>, <v>10<>, <v>120<>, <v>90<>)

<v>image<> = Image.new('RGBA', (160, 100), 'dimgrey')
Draw(<v>image<>).ellipse(<v>rectangle_1<>, 'yellow')
<v>image<>.show()

print(<v>rectangle_1<>, ":", <v>rectangle_1<>.x1, <v>rectangle_1<>.y1, <v>rectangle_1<>.x2, <v>rectangle_1<>.y2)

<#># Prints:
\# "Rectangle(x1=40, y1=10, x2=120, y2=90) : 40 10 120 90"<><>
@
@ x1, y1, x2, y2, dimensions



### Named Tuple - Size

<cb>= Size(<v>width<>, <v>height<>)<>

Define Type:

<cb>from collections import namedtuple

<v>Size<> = namedtuple("Size", ["width", "height"])<>

Use:

<cb><v>size_1<> = Size(<v>10<>, <v>20<>)

<v>image<> = Image.new('RGBA', <v>size_1<>, <v>color<>)
<v>width<> = <v>size_1<>.width<>


This is a drop in replacement for the (width, height) size tuple.
To make working with size data easier, create this namedtuple and use in place of plain size tuples.


Example:

<cb>from collections import namedtuple
from PIL import Image

Size = namedtuple("Size", ["width", "height"])

<v>size_1<> = Size(<v>160<>, <v>100<>)

<v>image<> = Image.new('RGBA', <v>size_1<>, 'dimgrey')
<v>image<>.show()

print(<v>size_1<>, ":", <v>size_1<>.width, <v>size_1<>.height)

<#># Prints: "Size(width=160, height=100) : 160 100"<><>
@
@ height, width



# Reference - Color Names

<table><col><c>'aliceblue'<><><col><c>'#f0f8ff'		<><><col><aliceblue>●<><>
<col><c>'antiquewhite'<><><col><c>'#faebd7'<><><col><antiquewhite>●<><>
<col><c>'aqua'<><><col><c>'#00ffff'<><><col><aqua>●<><>
<col><c>'aquamarine'<><><col><c>'#7fffd4'<><><col><aquamarine>●<><>
<col><c>'azure'<><><col><c>'#f0ffff'<><><col><azure>●<><>
<col><c>'beige'<><><col><c>'#f5f5dc'<><><col><beige>●<><>
<col><c>'bisque'<><><col><c>'#ffe4c4'<><><col><bisque>●<><>
<col><c>'black'<><><col><c>'#000000'<><><col><black>●<><>
<col><c>'blanchedalmond'<><><col><c>'#ffebcd'<><><col><blanchedalmond>●<><>
<col><c>'blue'<><><col><c>'#0000ff'<><><col><blue>●<><>
<col><c>'blueviolet'<><><col><c>'#8a2be2'<><><col><blueviolet>●<><>
<col><c>'brown'<><><col><c>'#a52a2a'<><><col><brown>●<><>
<col><c>'burlywood'<><><col><c>'#deb887'<><><col><burlywood>●<><>
<col><c>'cadetblue'<><><col><c>'#5f9ea0'<><><col><cadetblue>●<><>
<col><c>'chartreuse'<><><col><c>'#7fff00'<><><col><chartreuse>●<><>
<col><c>'chocolate'<><><col><c>'#d2691e'<><><col><chocolate>●<><>
<col><c>'coral'<><><col><c>'#ff7f50'<><><col><coral>●<><>
<col><c>'cornflowerblue'<><><col><c>'#6495ed'<><><col><cornflowerblue>●<><>
<col><c>'cornsilk'<><><col><c>'#fff8dc'<><><col><cornsilk>●<><>
<col><c>'crimson'<><><col><c>'#dc143c'<><><col><crimson>●<><>
<col><c>'cyan'<><><col><c>'#00ffff'<><><col><cyan>●<><>
<col><c>'darkblue'<><><col><c>'#00008b'<><><col><darkblue>●<><>
<col><c>'darkcyan'<><><col><c>'#008b8b'<><><col><darkcyan>●<><>
<col><c>'darkgoldenrod'<><><col><c>'#b8860b'<><><col><darkgoldenrod>●<><>
<col><c>'darkgray'<><><col><c>'#a9a9a9'<><><col><darkgray>●<><>
<col><c>'darkgrey'<><><col><c>'#a9a9a9'<><><col><darkgray>●<><>
<col><c>'darkgreen'<><><col><c>'#006400'<><><col><darkgreen>●<><>
<col><c>'darkkhaki'<><><col><c>'#bdb76b'<><><col><darkkhaki>●<><>
<col><c>'darkmagenta'<><><col><c>'#8b008b'<><><col><darkmagenta>●<><>
<col><c>'darkolivegreen'<><><col><c>'#556b2f'<><><col><darkolivegreen>●<><>
<col><c>'darkorange'<><><col><c>'#ff8c00'<><><col><darkorange>●<><>
<col><c>'darkorchid'<><><col><c>'#9932cc'<><><col><darkorchid>●<><>
<col><c>'darkred'<><><col><c>'#8b0000'<><><col><darkred>●<><>
<col><c>'darksalmon'<><><col><c>'#e9967a'<><><col><darksalmon>●<><>
<col><c>'darkseagreen'<><><col><c>'#8fbc8f'<><><col><darkseagreen>●<><>
<col><c>'darkslateblue'<><><col><c>'#483d8b'<><><col><darkslateblue>●<><>
<col><c>'darkslategray'<><><col><c>'#2f4f4f'<><><col><darkslategray>●<><>
<col><c>'darkslategrey'<><><col><c>'#2f4f4f'<><><col><darkslategray>●<><>
<col><c>'darkturquoise'<><><col><c>'#00ced1'<><><col><darkturquoise>●<><>
<col><c>'darkviolet'<><><col><c>'#9400d3'<><><col><darkviolet>●<><>
<col><c>'deeppink'<><><col><c>'#ff1493'<><><col><deeppink>●<><>
<col><c>'deepskyblue'<><><col><c>'#00bfff'<><><col><deepskyblue>●<><>
<col><c>'dimgray'<><><col><c>'#696969'<><><col><dimgray>●<><>
<col><c>'dimgrey'<><><col><c>'#696969'<><><col><dimgray>●<><>
<col><c>'dodgerblue'<><><col><c>'#1e90ff'<><><col><dodgerblue>●<><>
<col><c>'firebrick'<><><col><c>'#b22222'<><><col><firebrick>●<><>
<col><c>'floralwhite'<><><col><c>'#fffaf0'<><><col><floralwhite>●<><>
<col><c>'forestgreen'<><><col><c>'#228b22'<><><col><forestgreen>●<><>
<col><c>'fuchsia'<><><col><c>'#ff00ff'<><><col><fuchsia>●<><>
<col><c>'gainsboro'<><><col><c>'#dcdcdc'<><><col><gainsboro>●<><>
<col><c>'ghostwhite'<><><col><c>'#f8f8ff'<><><col><ghostwhite>●<><>
<col><c>'gold'<><><col><c>'#ffd700'<><><col><gold>●<><>
<col><c>'goldenrod'<><><col><c>'#daa520'<><><col><goldenrod>●<><>
<col><c>'gray'<><><col><c>'#808080'<><><col><gray>●<><>
<col><c>'grey'<><><col><c>'#808080'<><><col><gray>●<><>
<col><c>'green'<><><col><c>'#008000'<><><col><green>●<><>
<col><c>'greenyellow'<><><col><c>'#adff2f'<><><col><greenyellow>●<><>
<col><c>'honeydew'<><><col><c>'#f0fff0'<><><col><honeydew>●<><>
<col><c>'hotpink'<><><col><c>'#ff69b4'<><><col><hotpink>●<><>
<col><c>'indianred'<><><col><c>'#cd5c5c'<><><col><indianred>●<><>
<col><c>'indigo'<><><col><c>'#4b0082'<><><col><indigo>●<><>
<col><c>'ivory'<><><col><c>'#fffff0'<><><col><ivory>●<><>
<col><c>'khaki'<><><col><c>'#f0e68c'<><><col><khaki>●<><>
<col><c>'lavender'<><><col><c>'#e6e6fa'<><><col><lavender>●<><>
<col><c>'lavenderblush'<><><col><c>'#fff0f5'<><><col><lavenderblush>●<><>
<col><c>'lawngreen'<><><col><c>'#7cfc00'<><><col><lawngreen>●<><>
<col><c>'lemonchiffon'<><><col><c>'#fffacd'<><><col><lemonchiffon>●<><>
<col><c>'lightblue'<><><col><c>'#add8e6'<><><col><lightblue>●<><>
<col><c>'lightcoral'<><><col><c>'#f08080'<><><col><lightcoral>●<><>
<col><c>'lightcyan'<><><col><c>'#e0ffff'<><><col><lightcyan>●<><>
<col><c>'lightgoldenrodyellow'<><><col><c>'#fafad2'<><><col><lightgoldenrodyellow>●<><>
<col><c>'lightgreen'<><><col><c>'#90ee90'<><><col><lightgreen>●<><>
<col><c>'lightgray'<><><col><c>'#d3d3d3'<><><col><lightgray>●<><>
<col><c>'lightgrey'<><><col><c>'#d3d3d3'<><><col><lightgray>●<><>
<col><c>'lightpink'<><><col><c>'#ffb6c1'<><><col><lightpink>●<><>
<col><c>'lightsalmon'<><><col><c>'#ffa07a'<><><col><lightsalmon>●<><>
<col><c>'lightseagreen'<><><col><c>'#20b2aa'<><><col><lightseagreen>●<><>
<col><c>'lightskyblue'<><><col><c>'#87cefa'<><><col><lightskyblue>●<><>
<col><c>'lightslategray'<><><col><c>'#778899'<><><col><lightslategray>●<><>
<col><c>'lightslategrey'<><><col><c>'#778899'<><><col><lightslategray>●<><>
<col><c>'lightsteelblue'<><><col><c>'#b0c4de'<><><col><lightsteelblue>●<><>
<col><c>'lightyellow'<><><col><c>'#ffffe0'<><><col><lightyellow>●<><>
<col><c>'lime'<><><col><c>'#00ff00'<><><col><lime>●<><>
<col><c>'limegreen'<><><col><c>'#32cd32'<><><col><limegreen>●<><>
<col><c>'linen'<><><col><c>'#faf0e6'<><><col><linen>●<><>
<col><c>'magenta'<><><col><c>'#ff00ff'<><><col><magenta>●<><>
<col><c>'maroon'<><><col><c>'#800000'<><><col><maroon>●<><>
<col><c>'mediumaquamarine'<><><col><c>'#66cdaa'<><><col><mediumaquamarine>●<><>
<col><c>'mediumblue'<><><col><c>'#0000cd'<><><col><mediumblue>●<><>
<col><c>'mediumorchid'<><><col><c>'#ba55d3'<><><col><mediumorchid>●<><>
<col><c>'mediumpurple'<><><col><c>'#9370db'<><><col><mediumpurple>●<><>
<col><c>'mediumseagreen'<><><col><c>'#3cb371'<><><col><mediumseagreen>●<><>
<col><c>'mediumslateblue'<><><col><c>'#7b68ee'<><><col><mediumslateblue>●<><>
<col><c>'mediumspringgreen'<><><col><c>'#00fa9a'<><><col><mediumspringgreen>●<><>
<col><c>'mediumturquoise'<><><col><c>'#48d1cc'<><><col><mediumturquoise>●<><>
<col><c>'mediumvioletred'<><><col><c>'#c71585'<><><col><mediumvioletred>●<><>
<col><c>'midnightblue'<><><col><c>'#191970'<><><col><midnightblue>●<><>
<col><c>'mintcream'<><><col><c>'#f5fffa'<><><col><mintcream>●<><>
<col><c>'mistyrose'<><><col><c>'#ffe4e1'<><><col><mistyrose>●<><>
<col><c>'moccasin'<><><col><c>'#ffe4b5'<><><col><moccasin>●<><>
<col><c>'navajowhite'<><><col><c>'#ffdead'<><><col><navajowhite>●<><>
<col><c>'navy'<><><col><c>'#000080'<><><col><navy>●<><>
<col><c>'oldlace'<><><col><c>'#fdf5e6'<><><col><oldlace>●<><>
<col><c>'olive'<><><col><c>'#808000'<><><col><olive>●<><>
<col><c>'olivedrab'<><><col><c>'#6b8e23'<><><col><olivedrab>●<><>
<col><c>'orange'<><><col><c>'#ffa500'<><><col><orange>●<><>
<col><c>'orangered'<><><col><c>'#ff4500'<><><col><orangered>●<><>
<col><c>'orchid'<><><col><c>'#da70d6'<><><col><orchid>●<><>
<col><c>'palegoldenrod'<><><col><c>'#eee8aa'<><><col><palegoldenrod>●<><>
<col><c>'palegreen'<><><col><c>'#98fb98'<><><col><palegreen>●<><>
<col><c>'paleturquoise'<><><col><c>'#afeeee'<><><col><paleturquoise>●<><>
<col><c>'palevioletred'<><><col><c>'#db7093'<><><col><palevioletred>●<><>
<col><c>'papayawhip'<><><col><c>'#ffefd5'<><><col><papayawhip>●<><>
<col><c>'peachpuff'<><><col><c>'#ffdab9'<><><col><peachpuff>●<><>
<col><c>'peru'<><><col><c>'#cd853f'<><><col><peru>●<><>
<col><c>'pink'<><><col><c>'#ffc0cb'<><><col><pink>●<><>
<col><c>'plum'<><><col><c>'#dda0dd'<><><col><plum>●<><>
<col><c>'powderblue'<><><col><c>'#b0e0e6'<><><col><powderblue>●<><>
<col><c>'purple'<><><col><c>'#800080'<><><col><purple>●<><>
<col><c>'rebeccapurple'<><><col><c>'#663399'<><><col><rebeccapurple>●<><>
<col><c>'red'<><><col><c>'#ff0000'<><><col><red>●<><>
<col><c>'rosybrown'<><><col><c>'#bc8f8f'<><><col><rosybrown>●<><>
<col><c>'royalblue'<><><col><c>'#4169e1'<><><col><royalblue>●<><>
<col><c>'saddlebrown'<><><col><c>'#8b4513'<><><col><saddlebrown>●<><>
<col><c>'salmon'<><><col><c>'#fa8072'<><><col><salmon>●<><>
<col><c>'sandybrown'<><><col><c>'#f4a460'<><><col><sandybrown>●<><>
<col><c>'seagreen'<><><col><c>'#2e8b57'<><><col><seagreen>●<><>
<col><c>'seashell'<><><col><c>'#fff5ee'<><><col><seashell>●<><>
<col><c>'sienna'<><><col><c>'#a0522d'<><><col><sienna>●<><>
<col><c>'silver'<><><col><c>'#c0c0c0'<><><col><silver>●<><>
<col><c>'skyblue'<><><col><c>'#87ceeb'<><><col><skyblue>●<><>
<col><c>'slateblue'<><><col><c>'#6a5acd'<><><col><slateblue>●<><>
<col><c>'slategray'<><><col><c>'#708090'<><><col><slategray>●<><>
<col><c>'slategrey'<><><col><c>'#708090'<><><col><slategray>●<><>
<col><c>'snow'<><><col><c>'#fffafa'<><><col><snow>●<><>
<col><c>'springgreen'<><><col><c>'#00ff7f'<><><col><springgreen>●<><>
<col><c>'steelblue'<><><col><c>'#4682b4'<><><col><steelblue>●<><>
<col><c>'tan'<><><col><c>'#d2b48c'<><><col><tan>●<><>
<col><c>'teal'<><><col><c>'#008080'<><><col><teal>●<><>
<col><c>'thistle'<><><col><c>'#d8bfd8'<><><col><thistle>●<><>
<col><c>'tomato'<><><col><c>'#ff6347'<><><col><tomato>●<><>
<col><c>'turquoise'<><><col><c>'#40e0d0'<><><col><turquoise>●<><>
<col><c>'violet'<><><col><c>'#ee82ee'<><><col><violet>●<><>
<col><c>'wheat'<><><col><c>'#f5deb3'<><><col><wheat>●<><>
<col><c>'white'<><><col><c>'#ffffff'<><><col><white>●<><>
<col><c>'whitesmoke'<><><col><c>'#f5f5f5'<><><col><whitesmoke>●<><>
<col><c>'yellow'<><><col><c>'#ffff00'<><><col><yellow>●<><>
<col><c>'yellowgreen'<><><col><c>'#9acd32'<><><col><yellowgreen>●<><><>
@
@ color types, names, table, chart, colors, colours
@ colors-only, colours-only, color-only, colour-only, color-names



# Reference - Resample Filters
@
@ filters-only, filter-only, resample-only, resample-filters-only


## Resample Filter - Basics

Types:

<cb>Resampling.ANTIALIASED
Resampling.BICUBIC
Resampling.BILINEAR
Resampling.BOX
Resampling.HAMMING
Resampling.LANCZOS
Resampling.NEAREST<>

Usage:

<cb>from PIL.Image import Resampling

<v>image<>.resize(<v>...<>, filter = Resampling.<v>filter<>)<>


## Filter - Details



### Filter - Bicubic

<cb>= Resampling.BICUBIC<>

Usage:

from PIL.Image import Resampling

= Resampling.BICUBIC<>


Produces better image quality of all filters except LANCZOS.

Uses cubic interpolation on all pixels.
@
@ Image.Resampling.BICUBIC, Resampling.BICUBIC
@ resize, thumbnail



### Filter - Bilinear

<cb>= Image.BILINEAR<>

Usage:

from PIL.Image import Resampling

= Resampling.BILINEAR<>-


Uses linear interpolation on all pixels.
@
@ Image.Resampling.BILINEAR, Resampling.BILINEAR
@ resize, thumbnail



### Filter - Box

<cb>= Resampling.BOX<>

Usage:

from PIL.Image import Resampling

= Resampling.BOX<>


Uses equal weights for each source pixel that contributes to a target pixel.
@
@ Image.Resampling.BOX, Resampling.BOX
@ resize, thumbnail



### Filter - Hamming

<cb>= Resampling.HAMMING<>

Usage:

from PIL.Image import Resampling

= Resampling.HAMMING<>


Produces a sharper image than BILINEAR.
Doesn't have dislocations on a local level unlike BOX which may.
@
@ Image.Resampling.HAMMING, Resampling.HAMMING
@ resize, thumbnail



### Filter - Lanczos

<cb>= Resampling.LANCZOS<>

Usage:

from PIL.Image import Resampling

= Resampling.LANCZOS<>


Slowest of the filters but produces the best image quality.

Uses high-quality Lanczos filter (truncated sinc).
Use this for anti-aliasing.
@
@ Image.Resampling.LANCZOS, Resampling.LANCZOS
@ resize, thumbnail, Anti-aliased, Anti-aliasing, antialiased, antialiasing, resampling.antialiased,



### Filter - Nearest

<cb>= Resampling.NEAREST<>

Usage:

from PIL.Image import Resampling

= Resampling.NEAREST<>


Fastest of the filters, but also produces the worst quality.
@
@ Image.Resampling.NEAREST, Resampling.NEAREST
@ resize, thumbnail



# Reference - Modes

Mode Parameter:

<cb>(<v>...<>, mode = '<v>mode<>')<>

Mode is case sensitive.

<card><table><col><b>Mode<>	<><col><b>Pixels<><><col><b>Color<><>
<col> <>
<col><c>1<><><col>1-bit<><col>Black And White<^><#>1<><><>
<col><c>CMYK<><><col>4x8-bit<><col>Color Separation<>
<col><c>HSV<><><col>3x8-bit<><col>Hue, Saturation, Value<>
<col><c>L<><><col>8-bit<><col>Black And White<>
<col><c>LAB<><><col>3x8-bit<><col>L*a*b Color Space<>
<col><c>P<><><col>8-bit<><col>Using Color Palette<^><#>2<><><>
<col><c>RGB<><><col>3x8-bit<><col>True Color<>
<col><c>RGBA<><><col>4x8-bit<><col>True Color, Transparency Mask<>
<col><c>YCbCr<><><col>3x8-bit<><col>Color Video Format<^><#>3<><><>
<col> <>
<col><c>F<><><col>32-bit Floating Point<><col>n/a<>
<col><c>I<><><col>32-bit Signed Integer<><col>n/a<>
<><>

<card><table><col>1-bit<><col>Black And White<^><#>1<><><><col><c>1<><>
<col>3x8-bit<><col>Color Video Format<^><#>3<><><><col><c>YCbCr<><>
<col>3x8-bit<><col>Hue, Saturation, Value<><col><c>HSV<><>
<col>3x8-bit<><col>L*a*b Color Space<><col><c>LAB<><>
<col>3x8-bit<><col>True Color<><col><c>RGB<><>
<col>4x8-bit<><col>Color Separation<><col><c>CMYK<><>
<col>4x8-bit<><col>True Color, Transparency Mask<><col><c>RGBA<><>
<col>8-bit<><col>Black And White<><col><c>L<><>
<col>8-bit<><col>Using Color Palette<^><#>3<><><><col><c>P<><>
<col> <>
<col>32-bit Floating Point<><col>n/a<><col><c>F<><>
<col>32-bit Signed Integer<><col>n/a<><col><c>I<><><><>

1 - Stored 1 Pixel Per Byte
2 - Maps To Another Mode Using A Color Palette
3 - JPEG Standard, Not Itu-r Bt.2020 Standard
@
@ TODO



# Acronyms

### PIL
Python Image Library



# Terms
