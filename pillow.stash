# <#>Pillow<> SpeedSheet
<b>Find what you need, faster.<>


# Summary

A current, maintained version if PIL.


### Links

Official:
<l>https://pillow.readthedocs.io/en/stable/index.html<>

Source:
<l>https://github.com/python-pillow/Pillow<>

Pypi:
<l>https://pypi.org/project/Pillow/<>



### Install - PIP

<cb>pip3 install Pillow<>



### Install - PIP Requirements.txt

Add:

<cb>Pillow<>



# File Functions



### Image File - Read

<cb>= Image.open()<>

Full Form:

<cb>from PIL import Image

= Image.open(<v>image_path<>)<>


Returns: <!>?<>  |  <c>PIL.JpegImagePlugin.JpegImageFile<>
@
@ .open(), load



### Image File - Write

<cb><v>image<>.save(<v>file_path<>)<>


The file name extension determines the file format used.


Example:

<cb>from PIL import Image, ImageDraw

image = Image.new('RGBA', (160, 100), (127, 255, 0))
<v>image<>.save("<v>new_image.png<>")<>
@
@ .save(), save



### Image File - Write Animated

<cb><v>images<>[0].save(
		<v>file_name<>,
		append_images = <v>images<>[1:],
		duration = <v>milliseconds<>,
		loop = 0,
		save_all = True,
		optimize = True)<>


Writes a list of images to an animated image file for types gif and webp.


Example:

<cb>from PIL import Image, ImageDraw

def add_square(<v>image<>, dimensions):
	draw = ImageDraw.Draw(<v>image<>)
	draw.ellipse(dimensions, (255, 255, 0, 255))
	return <v>image<>

<v>background<> = Image.new('RGBA', (<v>100<>, <v>100<>), (<v>30<>, <v>30<>, <v>25<>))

<v>image_1<> = add_square(<v>background<>.copy(), (<v>10<>, <v>10<>, <v>50<>, <v>50<>))
<v>image_2<> = add_square(<v>background<>.copy(), (<v>30<>, <v>30<>, <v>70<>, <v>70<>))
<v>image_3<> = add_square(<v>background<>.copy(), (<v>50<>, <v>50<>, <v>90<>, <v>90<>))

<v>images<> = [<v>image_1<>, <v>image_2<>, <v>image_3<>]

<v>images<>[0].save(
		"<v>squared.gif<>",
		append_images = <v>images<>[1:],
		duration = <v>50<>,
		loop = 0,
		save_all = True,
		optimize = True)<>
@
@ .save(), save
@ gif, webp



# Image Functions


### Image - Create

<cb>= Image.new()<>

Full Form:

<cb>from PIL import Image

= Image.new(<v>mode<>, <v>size<>)<>

<cb>= Image.new(<v>mode<>, <v>size<>, <v>color<>)<>

<table><col><c>mode<><><col>(string)<><col><code>'RGB'
'RGBA'<><>
<col> <>
<col><c>size<><><col>(tuple)<><col><code>(<v>width<>, <v>height<>)<><>
<col> <>
<col>color<><col>(tuple)<><col><code>(<v>red<>, <v>blue<>, <v>green<>)
(<v>red<>, <v>blue<>, <v>green<>, <v>alpha<>)<><><>


Creates a new image of the given size and color.


Examples:

<cb>from PIL import Image

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>))
<v>image<>.show()<>

Colored Black:

<cb>from PIL import Image

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (0,0,0))
<v>image<>.show()<>
@
@ new, pil.image.new(), image.new(), .new()



### Image - Create From Array

<cb>= Image.fromarray()<>

Full Form:

<cb>from PIL import Image

= Image.fromarray(<v>list_1<>)<>

See:
<l>https://stackoverflow.com/questions/14452824/how-can-i-save-an-image-with-pil<><>
@
@ Image.fromarray(), .fromarray(), convert



### Image - Copy

<cb>= <v>image_1<>.copy()<>


Creates a copy of the image.


Example:

<cb>from PIL import Image, ImageDraw

<v>image_1<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image_1<>)
<v>draw<>.rectangle((10, 10, 150, 90), (127, 255, 127))

<v>image_2<> = <v>image_1<>.copy()

<v>image_2<>.show()<>
@
@ image.copy(), .copy()



### Image Edit - Crop

<cb>= image.crop((<v>left<>, <v>top<>, <v>right_plus_one<>, <v>bottom_plus_one<>))<>

or

<cb><v>dimensions<> = (<v>left<>, <v>top<>, <v>right_plus_one<>, <v>bottom_plus_one<>)
= image.crop(<v>dimensions<>)<>


Returns: <c>PIL.Image.Image<>


Example:

<cb><v>dimensions<> = (<v>10<>, <v>5<>, <v>30<>, <v>15<>)
<v>cropped<> = image.crop(<v>crop_box<>)<>

Returns Blue Box (Size 20 x 10):

<image "Image - Crop.png">
@
@ .crop()



### Image Edit - Resize

<cb><v>image_1<>.resize((<v>width<>, <v>height<>), <v>resize_algorithm<>)		<#>#1<><>


Returns: <c>PIL.Image.Image<>


<c><v>resize_algorithm<><>:

<cb>Image.ANTIALIAS
Image.LANCZOS<>


\#1  -  <c><v>width<><> and <c><v>height<><> must be integers.


Exapmle:

<cb><v>resized<> = <v>image_1<>.resize((160, 90), Image.LANCZOS)<>


### Image Edit - Rotate

<cb>= <v>image_1<>.rotate(<v>degrees<>)<>


Returns: <!>?<>  |  <c>PIL.JpegImagePlugin.JpegImageFile<>



### Image - Insert Image

<cb><v>target_image<>.paste(<v>insert_image<>, <v>position<>)<>

<cb><v>target_image<>.paste(<v>insert_image<>, (<left>, <v>top<>))<>


Inserts an image onto a second image.

The position defines the top left coordinate of the inserted image.


Example:

<cb>from PIL import Image, ImageDraw

<v>main_image<> = Image.new('RGBA', (160, 100), (64, 64, 64))
<v>insert_image<> = Image.new('RGBA', (80, 50), (0, 255, 0))

<v>main_image<>.paste(<v>insert_image<>, (10, 20))

<v>main_image<>.show()<>
@
@ paste, 2nd, second, another, on top of
@ image.paste(), .paste()



### Image - Blend Images

<cb>= Image.blend(<v>image_1<>, <v>image_2<>, <v>alpha<>)<>

Full Form:

<cb>from PIL import Image

<v>blended<> = Image.blend(<v>image_1<>, <v>image_2<>, <v>alpha<>)<>


Blends two images together.
Images must be in "RGBA" form.
The blend rate from one image to the other is determined by the <c><v>alpha<><> value.


<c><v>alpha<><>:

<in-2>A value between 0 and 1.

<table><col>0.0<><col>1st Image Only<>
<col>0.5<><col>50/50 Blent of Both<>
<col>1.0<><col>2nd Image Only<><><>


Example:

<cb>from PIL import Image, ImageDraw

def add_circle(<v>image<>, <v>dimensions<>, <v>color<>):
	<v>draw<> = ImageDraw.Draw(<v>image<>)
	<v>draw<>.ellipse(dimensions, <v>color<>)	

<v>image_1<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
<v>image_2<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

add_circle(<v>image_1<>, (10, 10, 90, 90), 'red')
add_circle(<v>image_2<>, (70, 10, 150, 90), 'lime')

<v>blended<> = Image.blend(<v>image_1<>, <v>image_2<>, 0.5)

<v>blended<>.show()<>
@
@ Image.blend(), .blend(), merge



### Image - View

<cb><v>image<>.show()<>

Shows the image in using the default OS viewer.

@
@ .show(), show, display



# Image Properties



### Image Properties - Size

<cb>= <v>image<>.size<>

Returns: <c>tuple (width, height)<>



### Image Properties - Size, Height

<cb>= <v>image<>.size[1]<>



### Image Properties - Size, Width

<cb>= <v>image<>.size[0]<>



# Image Drawing Functions


### Draw - Ellipse

<cb><v>draw_1<>.ellipse(<v>dimensions<>, <v>fill_color<>)<>

<cb><v>draw_1<>.ellipse((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>fill_color<>)<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.ellipse(<v>dimensions<>, <v>fill_color<>)
<v>draw<>.ellipse(<v>dimensions<>, <v>fill_color<>, <v>outline_color<>)
<v>draw<>.ellipse(<v>dimensions<>, fill = <v>fill_color<>, outline = <v>outline_color<>)<>


<c><v>dimensions<><> (tuple):

<cb>= (<v>left<>, <v>top<>, <v>right<>, <v>bottom<>)
= ((<v>left<>, <v>top<>), (<v>right<>, <v>bottom<>))<>


Fills in an elliptical or circular area in the image.


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), (127, 255, 127))

<v>image<>.show()<>
@
@ fill, circles, ellipses
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .ellipse()



### Draw - Line

<cb><v>draw_1<>.line(<v>dimensions<>, <v>fill_color<>)<>

<cb><v>draw_1<>.line((<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>), <v>fill_color<>)<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.line(<v>dimensions<>, <v>fill_color<>)
<v>draw<>.line(<v>dimensions<>, <v>fill_color<>, <v>width<>)
<v>draw<>.line(<v>dimensions<>, fill = <v>fill_color<>, width = <v>width<>)<>


<c><v>dimensions<><> (tuple):

<cb>= (<v>left<>, <v>top<>, <v>right<>, <v>bottom<>)
= ((<v>left<>, <v>top<>), (<v>right<>, <v>bottom<>))<>


Draws a line in the image.


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.line((10, 10, 150, 90), (127, 255, 127))

<v>image<>.show()<>
@
@ fill, lines, width, wide
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .line()



### Draw - Line - Multiple Lines

<cb><v>draw_1<>.line(<v>xy_points<>, <v>fill_color<>)<>

<cb><v>draw_1<>.line(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), <v>fill_color<>)<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.line(<v>xy_points<>, <v>fill_color<>)
<v>draw<>.line(<v>xy_points<>, <v>fill_color<>, <v>width<>)
<v>draw<>.line(<v>xy_points<>, fill = <v>fill_color<>, width = <v>width<>)
<v>draw<>.line(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), fill = <v>fill_color<>, width = <v>width<>)<>


Draws a series of connected lines in the image.


Examples:

Passing Tuple of XY Points:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>xy_points<> = ((10, 10), (150, 50), (10, 90))
<v>yellow<> = (255, 255, 0)

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.line(<v>xy_points<>, <v>yellow<>)

<v>image<>.show()<>

Passing Directly:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.line(((10, 10), (150, 50), (10, 90)), (255, 255, 0))

<v>image<>.show()<>
@
@ fill, width, wide
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .line()



### Draw - Point

<cb><v>draw_1<>.point((<v>x<>, <v>y<>), <v>color<>)<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.point((<v>x1<>, <v>y1<>), fill = <v>color<>)<>


Draws a point in the image.
A point is one pixel in size (can't adjust width).


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.point((10, 20), (127, 255, 127))

<v>image<>.show()<>
@
@ points
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .point()



### Draw - Point - Multiple Points

<cb><v>draw_1<>.point(<v>xy_points<>, <v>color<>)<>

<cb><v>draw_1<>.point(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), <v>color<>)<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.point(<v>xy_points<>, <v>color<>)
<v>draw<>.point(<v>xy_points<>, fill = <v>color<>)
<v>draw<>.point(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), fill = <v>color<>)<>


Draws multiple points at once on the image.
Each point is one pixel in size (can not adjust width).


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.point(((20, 20), (20, 40), (20, 60)), (255, 255, 0))

<v>image<>.show()<>
@
@ fill
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .point()



### Draw - Polygon

<cb><v>draw_1<>.polygon(<v>xy_points<>, <v>color<>)<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.polygon(<v>points<>, <v>color<>, <v>color<>)
<v>draw<>.polygon(<v>points<>, fill = <v>color<>, outline = <v>color<>)
<v>draw<>.polygon(((<v>x1<>, <v>y1<>), (<v>x2<>, <v>y2<>), <v>...<>), fill = <v>color<>)<>


Draws a polygon in the image.


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)

<v>draw<>.polygon(
		((80, 20), (80, 80), (20, 50)),
		fill = (255, 255, 0))

<v>image<>.show()<>
@
@ fill, polygons, shapes
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .polygon()



### Draw - Polygon Outline

Use:

<cb><v>draw_1<>.line(<v>set_of_xy_points<>, <v>fill_color<>)<>

<l>pillow?search=line<>
@
@ polygons



### Draw - Rectangle

<cb><v>draw_1<>.rectangle(<v>dimensions<>, <v>fill_color<>)<>

Full Form:

<cb>from PIL import ImageDraw

<v>draw<> = ImageDraw.Draw(<v>image_1<>)

<v>draw<>.rectangle(<v>dimensions<>, <v>fill_color<>)<>

<cb><v>draw<>.rectangle(<v>dimensions<>, <v>fill_color<>, <v>outline_color<>)<>

<cb><v>draw<>.rectangle(<v>dimensions<>, fill = <v>fill_color<>, outline = <v>outline_color<>)<>


<c><v>dimensions<><> (tuple):

<cb>= (<v>upper_left_x<>, <v>upper_left_y<>, <v>lower_right_x<>, <v>lower_right_y<>)
= ((<v>upper_left_x<>, <v>upper_left_y<>), (<v>lower_right_x<>, <v>lower_right_y<>))<>


Fills in a rectangular area in the image.


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.rectangle((10, 10, 150, 90), (127, 255, 127))

<v>image<>.show()<>
@
@ fill, box, squares, rectangles
@ pil.imagedraw.draw(), imagedraw.draw(), .draw()
@ .rectangle()



# Tools


### Color - Get RGB From Hex Value

<cb>= ImageColor.getrgb('#<v>hex_value<>')<>

With Import

<cb>from PIL import ImageColor

= ImageColor.getrgb('#<v>hex_value<>')<>


Retrieves the color value for the given hex value.


Example:

<cb>from PIL import Image, ImageColor, ImageDraw

<v>MAGENTA<> = ImageColor.getrgb('#<v>FF00FF<>')

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), <v>MAGENTA<>)

<v>image<>.show()<>
@
@ named, #



### Color - Get RGB From Name

<cb>= ImageColor.getrgb('<v>color_name<>')<>

With Import:

<cb>from PIL import ImageColor

= ImageColor.getrgb('<v>color_name<>')<>


Returns the color value for a named color.


Example Names:

<in><card><table><col><c>'Green'<><><col><green>●<><>
<col><c>'DarkGreen'<><><col><darkgreen>●<><>
<col><c>'Lime'<><><col><lime>●<><>
<col><c>'OliveDrab'<><><col><olivedrab>●<><><><><>



Example:

<cb>from PIL import Image, ImageColor, ImageDraw

<v>MAGENTA<> = ImageColor.getrgb('<v>magenta<>')

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))
<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), <v>MAGENTA<>)

<v>image<>.show()<>
@
@ named



# How To

@ how-to



### Image - Antialias

Can only be done by super sampling.

<cb><v>antialiased<> = <v>image<>.resize(
		(<v>width<> // 2, <v>height<> // 2),
		resample = Image.ANTIALIAS)<>


Example:

<cb>from PIL import Image, ImageDraw

<v>width<> = 640
<v>height<> = 400

<v>image<> = Image.new(<v>'RGBA'<>, (<v>width<>, <v>height<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)

<v>draw<>.line(
		((20, 20), (620, 200), (20, 380), (20, 20)),
		fill = (255, 255, 0),
		width = 10)

<v>antialiased<> = image.resize(
		(<v>width<> // 2, <v>height<> // 2),
		resample = Image.ANTIALIAS)

<v>antialiased<>.show()<>
@
@ antialiasing, antialiased
@ Image.ANTIALIAS



### Image Effect - Gradient Background

Stack Overflow:
<l>https://stackoverflow.com/questions/32530345/pil-generating-vertical-gradient-image<>

Or Simpler(?):
<l>https://gist.github.com/weihanglo/1e754ec47fdd683a42fdf6a272904535<>
@
@ add


# Reference - Types


### Color Type

<cb>= (<v>red<>, <v>green<>, <v>blue<>)
= (<v>red<>, <v>green<>, <v>blue<>, <v>saturation<>)

= '#<v>FFFFFF<>'

= '<v>ColorName<>'<>


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>210<>, <v>100<>), (64, 64, 64, 255))

<v>draw<> = ImageDraw.Draw(<v>image<>)

<v>draw<>.rectangle((10, 10, 30, 90), (255, 255, 0, 0))
<v>draw<>.rectangle((40, 10, 60, 90), (255, 255, 0, 127))
<v>draw<>.rectangle((70, 10, 90, 90), (255, 255, 0, 255))

<v>draw<>.rectangle((120, 10, 140, 90), (255, 0, 0))
<v>draw<>.rectangle((150, 10, 170, 90), "#00FF00")
<v>draw<>.rectangle((180, 10, 200, 90), 'blue')

<v>image<>.show()<>



### Color Type - By Channel Value

<cb>= (<v>red<>, <v>green<>, <v>blue<>)<>

<cb>= (<v>red<>, <v>green<>, <v>blue<>, <v>saturation<>)<><>

Color is a three or four value tuple.
All values range from 0 to 255.


Example:

<cb><v>magenta<> = (<v>255<>, <v>0<>, <v>255<>)<>

50% Saturation:

<cb><v>magenta<> = (<v>255<>, <v>0<>, <v>255<>, <v>127<>)<>


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64, 255))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.ellipse((10, 10, 90, 90), (255, 0, 0))
<v>draw<>.ellipse((70, 10, 150, 90), (255, 255, 255, 64))

<v>image<>.show()<>



### Color Type - By Hex Value

<cb>= '#<v>FFFFFF<>'<>


You can define a color as a hash followed by a six digit hex value.


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), '#<v>FFFF00<>')

<v>image<>.show()<>



### Color Type - By Name

<cb>= '<v>ColorName<>'<>


You can use a standard web color name passed as a string.


Example:

<in><card><table><col><c>'Red'<><><col><red>●<><>
<col><c>'DarkRed'<><><col><darkred>●<><>
<col><c>'Crimson'<><><col><crimson>●<><>
<col><c>'Firebrick'<><><col><firebrick>●<><><><><>


See full list of color names below:

	<l pillow?search=color+names>Reference - Color Names<><>


Example:

<cb>from PIL import Image, ImageDraw

<v>image<> = Image.new(<v>'RGBA'<>, (<v>160<>, <v>100<>), (64, 64, 64))

<v>draw<> = ImageDraw.Draw(<v>image<>)
<v>draw<>.ellipse((40, 10, 120, 90), '<v>yellow<>')

<v>image<>.show()<>



### Size Type

<cb>= (<v>width<>, <v>height<>)<>

Size is a two value tuple.
Defines the size of the image in pixels.


Example:

<cb>size = (<v>160<>, <v>100<>)<>



# Reference - Types as Named Tuples

Named tuples can be used to make the values easier to work with.
Here are the principle data types defined as named tuples.
@
@ namedtuple


### Named Tuples - All

<cb>from collections import namedtuple

<v>AlphaColor<> = namedtuple("AlphaColor", ["red", "green", "blue", "alpha"])
<v>Color<> = namedtuple("AlphaColor", ["red", "green", "blue"])

<v>Point<> = namedtuple("Point", ["x", "y"])
<v>Size<> = namedtuple("Size", ["width", "height"])
<v>Dimensions<> = namedtuple("Dimensions", ["x1", "y1", "x2", "y2"])<>



### Named Tuple - Color

Define Type:

<cb>from collections import namedtuple

<v>Color<> = namedtuple("AlphaColor", ["red", "green", "blue"])<>

Use:

<cb><v>yellow<> = Color(<v>255<>, <v>255<>, <v>0<>)

print("Color Yellow: ", <v>yellow<>.red, <v>yellow<>.green, <v>yellow<>.blue)

<#># Prints: "Color Yellow: 255 255 0"<><>


An namedtuple wrapper for a color tuple to make it easier to work with



### Named Tuple - Color With Alpha Channel

Define Type:

<cb>from collections import namedtuple

<v>AlphaColor<> = namedtuple("AlphaColor", ["red", "green", "blue", "alpha"])<>

Use:

<cb><v>yellow<> = AlphaColor(<v>255<>, <v>255<>, <v>0<>, <v>255<>)
<v>transparent<> = AlphaColor(<v>0<>, <v>0<>, <v>0<>, <v>0<>)

print("Color Yellow: ", <v>yellow<>.red, <v>yellow<>.green, <v>yellow<>.blue, <v>yellow<>.alpha)

<#># Prints: "Color Yellow: 255 255 0 0"<><>



### Named Tuple - Point

Define Type:

<cb>from collections import namedtuple

<v>Point<> = namedtuple("Point", ["x", "y"])<>

Use:

<cb><v>point_1<> = Point(<v>10<>, <v>20<>)

print("Point: ", <v>point_1<>.x, <v>point_1<>.y)

<#># Prints: "Point: 10 20"<><>



### Named Tuple - Size

Define Type:

<cb>from collections import namedtuple

<v>Size<> = namedtuple("Size", ["width", "height"])<>

Use:

<cb><v>size_1<> = Size(<v>10<>, <v>20<>)

print("Size: ", <v>size_1<>.width, <v>size_1<>.height)

<#># Prints: "Size: 10 20"<><>



### Named Tuple - Dimensions

Define Type:

<cb>from collections import namedtuple

<v>Dimensions<> = namedtuple("Dimensions", ["x1", "y1", "x2", "y2"])<>

Use:

<cb><v>dimensions_1<> = Dimensions(<v>0<>, <v>0<>, <v>20<>, <v>40<>)

print("Dimensions: ", <v>dimensions_1<>.x1, <v>dimensions_1<>.y1, <v>dimensions_1<>.x2, <v>dimensions_1<>.y2)

<#># Prints: "Dimensions: 0 0 20 40"<><>



# Reference - Color Names

<table><col><c>'aliceblue'<><><col><c>'#f0f8ff'		<><><col><aliceblue>●<><>
<col><c>'antiquewhite'<><><col><c>'#faebd7'<><><col><antiquewhite>●<><>
<col><c>'aqua'<><><col><c>'#00ffff'<><><col><aqua>●<><>
<col><c>'aquamarine'<><><col><c>'#7fffd4'<><><col><aquamarine>●<><>
<col><c>'azure'<><><col><c>'#f0ffff'<><><col><azure>●<><>
<col><c>'beige'<><><col><c>'#f5f5dc'<><><col><beige>●<><>
<col><c>'bisque'<><><col><c>'#ffe4c4'<><><col><bisque>●<><>
<col><c>'black'<><><col><c>'#000000'<><><col><black>●<><>
<col><c>'blanchedalmond'<><><col><c>'#ffebcd'<><><col><blanchedalmond>●<><>
<col><c>'blue'<><><col><c>'#0000ff'<><><col><blue>●<><>
<col><c>'blueviolet'<><><col><c>'#8a2be2'<><><col><blueviolet>●<><>
<col><c>'brown'<><><col><c>'#a52a2a'<><><col><brown>●<><>
<col><c>'burlywood'<><><col><c>'#deb887'<><><col><burlywood>●<><>
<col><c>'cadetblue'<><><col><c>'#5f9ea0'<><><col><cadetblue>●<><>
<col><c>'chartreuse'<><><col><c>'#7fff00'<><><col><chartreuse>●<><>
<col><c>'chocolate'<><><col><c>'#d2691e'<><><col><chocolate>●<><>
<col><c>'coral'<><><col><c>'#ff7f50'<><><col><coral>●<><>
<col><c>'cornflowerblue'<><><col><c>'#6495ed'<><><col><cornflowerblue>●<><>
<col><c>'cornsilk'<><><col><c>'#fff8dc'<><><col><cornsilk>●<><>
<col><c>'crimson'<><><col><c>'#dc143c'<><><col><crimson>●<><>
<col><c>'cyan'<><><col><c>'#00ffff'<><><col><cyan>●<><>
<col><c>'darkblue'<><><col><c>'#00008b'<><><col><darkblue>●<><>
<col><c>'darkcyan'<><><col><c>'#008b8b'<><><col><darkcyan>●<><>
<col><c>'darkgoldenrod'<><><col><c>'#b8860b'<><><col><darkgoldenrod>●<><>
<col><c>'darkgray'<><><col><c>'#a9a9a9'<><><col><darkgray>●<><>
<col><c>'darkgrey'<><><col><c>'#a9a9a9'<><><col><darkgray>●<><>
<col><c>'darkgreen'<><><col><c>'#006400'<><><col><darkgreen>●<><>
<col><c>'darkkhaki'<><><col><c>'#bdb76b'<><><col><darkkhaki>●<><>
<col><c>'darkmagenta'<><><col><c>'#8b008b'<><><col><darkmagenta>●<><>
<col><c>'darkolivegreen'<><><col><c>'#556b2f'<><><col><darkolivegreen>●<><>
<col><c>'darkorange'<><><col><c>'#ff8c00'<><><col><darkorange>●<><>
<col><c>'darkorchid'<><><col><c>'#9932cc'<><><col><darkorchid>●<><>
<col><c>'darkred'<><><col><c>'#8b0000'<><><col><darkred>●<><>
<col><c>'darksalmon'<><><col><c>'#e9967a'<><><col><darksalmon>●<><>
<col><c>'darkseagreen'<><><col><c>'#8fbc8f'<><><col><darkseagreen>●<><>
<col><c>'darkslateblue'<><><col><c>'#483d8b'<><><col><darkslateblue>●<><>
<col><c>'darkslategray'<><><col><c>'#2f4f4f'<><><col><darkslategray>●<><>
<col><c>'darkslategrey'<><><col><c>'#2f4f4f'<><><col><darkslategray>●<><>
<col><c>'darkturquoise'<><><col><c>'#00ced1'<><><col><darkturquoise>●<><>
<col><c>'darkviolet'<><><col><c>'#9400d3'<><><col><darkviolet>●<><>
<col><c>'deeppink'<><><col><c>'#ff1493'<><><col><deeppink>●<><>
<col><c>'deepskyblue'<><><col><c>'#00bfff'<><><col><deepskyblue>●<><>
<col><c>'dimgray'<><><col><c>'#696969'<><><col><dimgray>●<><>
<col><c>'dimgrey'<><><col><c>'#696969'<><><col><dimgray>●<><>
<col><c>'dodgerblue'<><><col><c>'#1e90ff'<><><col><dodgerblue>●<><>
<col><c>'firebrick'<><><col><c>'#b22222'<><><col><firebrick>●<><>
<col><c>'floralwhite'<><><col><c>'#fffaf0'<><><col><floralwhite>●<><>
<col><c>'forestgreen'<><><col><c>'#228b22'<><><col><forestgreen>●<><>
<col><c>'fuchsia'<><><col><c>'#ff00ff'<><><col><fuchsia>●<><>
<col><c>'gainsboro'<><><col><c>'#dcdcdc'<><><col><gainsboro>●<><>
<col><c>'ghostwhite'<><><col><c>'#f8f8ff'<><><col><ghostwhite>●<><>
<col><c>'gold'<><><col><c>'#ffd700'<><><col><gold>●<><>
<col><c>'goldenrod'<><><col><c>'#daa520'<><><col><goldenrod>●<><>
<col><c>'gray'<><><col><c>'#808080'<><><col><gray>●<><>
<col><c>'grey'<><><col><c>'#808080'<><><col><gray>●<><>
<col><c>'green'<><><col><c>'#008000'<><><col><green>●<><>
<col><c>'greenyellow'<><><col><c>'#adff2f'<><><col><greenyellow>●<><>
<col><c>'honeydew'<><><col><c>'#f0fff0'<><><col><honeydew>●<><>
<col><c>'hotpink'<><><col><c>'#ff69b4'<><><col><hotpink>●<><>
<col><c>'indianred'<><><col><c>'#cd5c5c'<><><col><indianred>●<><>
<col><c>'indigo'<><><col><c>'#4b0082'<><><col><indigo>●<><>
<col><c>'ivory'<><><col><c>'#fffff0'<><><col><ivory>●<><>
<col><c>'khaki'<><><col><c>'#f0e68c'<><><col><khaki>●<><>
<col><c>'lavender'<><><col><c>'#e6e6fa'<><><col><lavender>●<><>
<col><c>'lavenderblush'<><><col><c>'#fff0f5'<><><col><lavenderblush>●<><>
<col><c>'lawngreen'<><><col><c>'#7cfc00'<><><col><lawngreen>●<><>
<col><c>'lemonchiffon'<><><col><c>'#fffacd'<><><col><lemonchiffon>●<><>
<col><c>'lightblue'<><><col><c>'#add8e6'<><><col><lightblue>●<><>
<col><c>'lightcoral'<><><col><c>'#f08080'<><><col><lightcoral>●<><>
<col><c>'lightcyan'<><><col><c>'#e0ffff'<><><col><lightcyan>●<><>
<col><c>'lightgoldenrodyellow'<><><col><c>'#fafad2'<><><col><lightgoldenrodyellow>●<><>
<col><c>'lightgreen'<><><col><c>'#90ee90'<><><col><lightgreen>●<><>
<col><c>'lightgray'<><><col><c>'#d3d3d3'<><><col><lightgray>●<><>
<col><c>'lightgrey'<><><col><c>'#d3d3d3'<><><col><lightgray>●<><>
<col><c>'lightpink'<><><col><c>'#ffb6c1'<><><col><lightpink>●<><>
<col><c>'lightsalmon'<><><col><c>'#ffa07a'<><><col><lightsalmon>●<><>
<col><c>'lightseagreen'<><><col><c>'#20b2aa'<><><col><lightseagreen>●<><>
<col><c>'lightskyblue'<><><col><c>'#87cefa'<><><col><lightskyblue>●<><>
<col><c>'lightslategray'<><><col><c>'#778899'<><><col><lightslategray>●<><>
<col><c>'lightslategrey'<><><col><c>'#778899'<><><col><lightslategray>●<><>
<col><c>'lightsteelblue'<><><col><c>'#b0c4de'<><><col><lightsteelblue>●<><>
<col><c>'lightyellow'<><><col><c>'#ffffe0'<><><col><lightyellow>●<><>
<col><c>'lime'<><><col><c>'#00ff00'<><><col><lime>●<><>
<col><c>'limegreen'<><><col><c>'#32cd32'<><><col><limegreen>●<><>
<col><c>'linen'<><><col><c>'#faf0e6'<><><col><linen>●<><>
<col><c>'magenta'<><><col><c>'#ff00ff'<><><col><magenta>●<><>
<col><c>'maroon'<><><col><c>'#800000'<><><col><maroon>●<><>
<col><c>'mediumaquamarine'<><><col><c>'#66cdaa'<><><col><mediumaquamarine>●<><>
<col><c>'mediumblue'<><><col><c>'#0000cd'<><><col><mediumblue>●<><>
<col><c>'mediumorchid'<><><col><c>'#ba55d3'<><><col><mediumorchid>●<><>
<col><c>'mediumpurple'<><><col><c>'#9370db'<><><col><mediumpurple>●<><>
<col><c>'mediumseagreen'<><><col><c>'#3cb371'<><><col><mediumseagreen>●<><>
<col><c>'mediumslateblue'<><><col><c>'#7b68ee'<><><col><mediumslateblue>●<><>
<col><c>'mediumspringgreen'<><><col><c>'#00fa9a'<><><col><mediumspringgreen>●<><>
<col><c>'mediumturquoise'<><><col><c>'#48d1cc'<><><col><mediumturquoise>●<><>
<col><c>'mediumvioletred'<><><col><c>'#c71585'<><><col><mediumvioletred>●<><>
<col><c>'midnightblue'<><><col><c>'#191970'<><><col><midnightblue>●<><>
<col><c>'mintcream'<><><col><c>'#f5fffa'<><><col><mintcream>●<><>
<col><c>'mistyrose'<><><col><c>'#ffe4e1'<><><col><mistyrose>●<><>
<col><c>'moccasin'<><><col><c>'#ffe4b5'<><><col><moccasin>●<><>
<col><c>'navajowhite'<><><col><c>'#ffdead'<><><col><navajowhite>●<><>
<col><c>'navy'<><><col><c>'#000080'<><><col><navy>●<><>
<col><c>'oldlace'<><><col><c>'#fdf5e6'<><><col><oldlace>●<><>
<col><c>'olive'<><><col><c>'#808000'<><><col><olive>●<><>
<col><c>'olivedrab'<><><col><c>'#6b8e23'<><><col><olivedrab>●<><>
<col><c>'orange'<><><col><c>'#ffa500'<><><col><orange>●<><>
<col><c>'orangered'<><><col><c>'#ff4500'<><><col><orangered>●<><>
<col><c>'orchid'<><><col><c>'#da70d6'<><><col><orchid>●<><>
<col><c>'palegoldenrod'<><><col><c>'#eee8aa'<><><col><palegoldenrod>●<><>
<col><c>'palegreen'<><><col><c>'#98fb98'<><><col><palegreen>●<><>
<col><c>'paleturquoise'<><><col><c>'#afeeee'<><><col><paleturquoise>●<><>
<col><c>'palevioletred'<><><col><c>'#db7093'<><><col><palevioletred>●<><>
<col><c>'papayawhip'<><><col><c>'#ffefd5'<><><col><papayawhip>●<><>
<col><c>'peachpuff'<><><col><c>'#ffdab9'<><><col><peachpuff>●<><>
<col><c>'peru'<><><col><c>'#cd853f'<><><col><peru>●<><>
<col><c>'pink'<><><col><c>'#ffc0cb'<><><col><pink>●<><>
<col><c>'plum'<><><col><c>'#dda0dd'<><><col><plum>●<><>
<col><c>'powderblue'<><><col><c>'#b0e0e6'<><><col><powderblue>●<><>
<col><c>'purple'<><><col><c>'#800080'<><><col><purple>●<><>
<col><c>'rebeccapurple'<><><col><c>'#663399'<><><col><rebeccapurple>●<><>
<col><c>'red'<><><col><c>'#ff0000'<><><col><red>●<><>
<col><c>'rosybrown'<><><col><c>'#bc8f8f'<><><col><rosybrown>●<><>
<col><c>'royalblue'<><><col><c>'#4169e1'<><><col><royalblue>●<><>
<col><c>'saddlebrown'<><><col><c>'#8b4513'<><><col><saddlebrown>●<><>
<col><c>'salmon'<><><col><c>'#fa8072'<><><col><salmon>●<><>
<col><c>'sandybrown'<><><col><c>'#f4a460'<><><col><sandybrown>●<><>
<col><c>'seagreen'<><><col><c>'#2e8b57'<><><col><seagreen>●<><>
<col><c>'seashell'<><><col><c>'#fff5ee'<><><col><seashell>●<><>
<col><c>'sienna'<><><col><c>'#a0522d'<><><col><sienna>●<><>
<col><c>'silver'<><><col><c>'#c0c0c0'<><><col><silver>●<><>
<col><c>'skyblue'<><><col><c>'#87ceeb'<><><col><skyblue>●<><>
<col><c>'slateblue'<><><col><c>'#6a5acd'<><><col><slateblue>●<><>
<col><c>'slategray'<><><col><c>'#708090'<><><col><slategray>●<><>
<col><c>'slategrey'<><><col><c>'#708090'<><><col><slategray>●<><>
<col><c>'snow'<><><col><c>'#fffafa'<><><col><snow>●<><>
<col><c>'springgreen'<><><col><c>'#00ff7f'<><><col><springgreen>●<><>
<col><c>'steelblue'<><><col><c>'#4682b4'<><><col><steelblue>●<><>
<col><c>'tan'<><><col><c>'#d2b48c'<><><col><tan>●<><>
<col><c>'teal'<><><col><c>'#008080'<><><col><teal>●<><>
<col><c>'thistle'<><><col><c>'#d8bfd8'<><><col><thistle>●<><>
<col><c>'tomato'<><><col><c>'#ff6347'<><><col><tomato>●<><>
<col><c>'turquoise'<><><col><c>'#40e0d0'<><><col><turquoise>●<><>
<col><c>'violet'<><><col><c>'#ee82ee'<><><col><violet>●<><>
<col><c>'wheat'<><><col><c>'#f5deb3'<><><col><wheat>●<><>
<col><c>'white'<><><col><c>'#ffffff'<><><col><white>●<><>
<col><c>'whitesmoke'<><><col><c>'#f5f5f5'<><><col><whitesmoke>●<><>
<col><c>'yellow'<><><col><c>'#ffff00'<><><col><yellow>●<><>
<col><c>'yellowgreen'<><><col><c>'#9acd32'<><><col><yellowgreen>●<><><>
@
@ color types, names


# Acronyms

### PIL
Python Image Library



# Terms
